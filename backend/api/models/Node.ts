/**
 * ODIN Fleet API
 * API to access Odin Fleet, empowering developers to deploy gameservers all around the world in just a few lines of code.  To authenticate, users must send their email, password, and session ID to the **[`/api/auth`](/operations/getAuthToken)** endpoint. Upon successful authentication, an API token will be provided. This token should be included in the `Authorization` header as a Bearer token for all subsequent requests.      Alternatively, you can copy your API key directly from our **[`console`](https://console.4players.io)** by opening any app, and then going to **Settings -> API Keys**.
 *
 * OpenAPI spec version: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Architecture } from '../models/Architecture.ts';
import { OperatingSystem } from '../models/OperatingSystem.ts';
import { HttpFile } from '../http/http.ts';

export class Node {
    /**
    * The architecture of the node (e.g., \'x86_64\')
    */
    'architecture': Architecture;
    /**
    * The operating system of the node
    */
    'os': OperatingSystem;
    /**
    * The IP address of the node
    */
    'address': string;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "architecture",
            "baseName": "architecture",
            "type": "Architecture",
            "format": ""
        },
        {
            "name": "os",
            "baseName": "os",
            "type": "OperatingSystem",
            "format": ""
        },
        {
            "name": "address",
            "baseName": "address",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return Node.attributeTypeMap;
    }

    public constructor() {
    }
}


