{
    "openapi": "3.1.0",
    "info": {
        "title": "ODIN Fleet API",
        "version": "0.8.1",
        "description": "API to access Odin Fleet, empowering developers to deploy gameservers all around the world in just a few lines of code.\n\nTo authenticate, users must send their email, password, and session ID to the **[`\/api\/auth`](\/operations\/getAuthToken)** endpoint. Upon successful authentication, an API token will be provided. This token should be included in the `Authorization` header as a Bearer token for all subsequent requests.\n    \nAlternatively, you can copy your API key directly from our **[`console`](https:\/\/console.4players.io)** by opening any app, and then going to **Settings -> API Keys**."
    },
    "servers": [
        {
            "url": "https:\/\/fleet.4players.io\/api",
            "description": "production"
        }
    ],
    "paths": {
        "\/v1\/app-location-settings\/{appLocationSetting}": {
            "put": {
                "operationId": "updateAppLocationSetting",
                "summary": "Update a location setting",
                "tags": [
                    "AppLocationSettings"
                ],
                "parameters": [
                    {
                        "name": "appLocationSetting",
                        "in": "path",
                        "required": true,
                        "description": "The app location setting ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/UpdateAppLocationSettingRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`AppLocationSetting`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/AppLocationSetting"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            },
            "delete": {
                "operationId": "deleteAppLocationSetting",
                "summary": "Delete a location setting",
                "tags": [
                    "AppLocationSettings"
                ],
                "parameters": [
                    {
                        "name": "appLocationSetting",
                        "in": "path",
                        "required": true,
                        "description": "The app location setting ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "null"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            },
            "get": {
                "operationId": "getAppLocationSettingById",
                "summary": "Show a specific app location setting",
                "tags": [
                    "AppLocationSettings"
                ],
                "parameters": [
                    {
                        "name": "appLocationSetting",
                        "in": "path",
                        "required": true,
                        "description": "The app location setting ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`AppLocationSetting`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/AppLocationSetting"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/apps\/{app}\/location-settings": {
            "get": {
                "operationId": "getAppLocationSettings",
                "summary": "Show all location settings",
                "tags": [
                    "AppLocationSettings"
                ],
                "parameters": [
                    {
                        "name": "app",
                        "in": "path",
                        "required": true,
                        "description": "The app ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`AppLocationSettingCollection`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/AppLocationSettingCollection"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    }
                }
            },
            "post": {
                "operationId": "createAppLocationSetting",
                "summary": "Create a new location setting",
                "tags": [
                    "AppLocationSettings"
                ],
                "parameters": [
                    {
                        "name": "app",
                        "in": "path",
                        "required": true,
                        "description": "The app ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/StoreAppLocationSettingRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`AppLocationSetting`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/AppLocationSetting"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/apps\/{app}\/location-settings\/{appLocationSetting}\/services": {
            "get": {
                "operationId": "listServicesForAppLocationSetting",
                "summary": "Show all services for a specific app location setting within a given app",
                "tags": [
                    "AppLocationSettings"
                ],
                "parameters": [
                    {
                        "name": "app",
                        "in": "path",
                        "required": true,
                        "description": "The app ID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "appLocationSetting",
                        "in": "path",
                        "required": true,
                        "description": "The app location setting ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`ServerCollection`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/ServerCollection"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/apps": {
            "get": {
                "operationId": "getApps",
                "summary": "Show all apps",
                "tags": [
                    "Apps"
                ],
                "responses": {
                    "200": {
                        "description": "`AppCollection`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/AppCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    }
                }
            },
            "post": {
                "operationId": "createApp",
                "summary": "Create an app",
                "tags": [
                    "Apps"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/StoreAppRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`App`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/App"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/apps\/{app}": {
            "get": {
                "operationId": "getAppById",
                "summary": "Show a specific app",
                "tags": [
                    "Apps"
                ],
                "parameters": [
                    {
                        "name": "app",
                        "in": "path",
                        "required": true,
                        "description": "The app ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`App`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/App"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            },
            "delete": {
                "operationId": "deleteApp",
                "summary": "Delete a specific app",
                "tags": [
                    "Apps"
                ],
                "parameters": [
                    {
                        "name": "app",
                        "in": "path",
                        "required": true,
                        "description": "The app ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "null"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            },
            "put": {
                "operationId": "updateAppById",
                "summary": "Update a specific app",
                "tags": [
                    "Apps"
                ],
                "parameters": [
                    {
                        "name": "app",
                        "in": "path",
                        "required": true,
                        "description": "The app ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/UpdateAppRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`App`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/App"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/auth\/token": {
            "post": {
                "operationId": "getAuthToken",
                "description": "Authenticates the user based on the user's email, password, and session ID.\nIf the user is authenticated successfully, it returns the user's token.\n\nThe token is non-expiring and must be used as a Bearer token in subsequent requests.",
                "summary": "Get token",
                "tags": [
                    "Auth"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/AuthRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`Auth`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/Auth"
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/apps\/{app}\/binaries": {
            "get": {
                "operationId": "getBinaries",
                "summary": "Show all binaries",
                "tags": [
                    "Binaries"
                ],
                "parameters": [
                    {
                        "name": "app",
                        "in": "path",
                        "required": true,
                        "description": "The app ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`BinaryCollection`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/BinaryCollection"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            },
            "post": {
                "operationId": "createBinary",
                "summary": "Create a binary and the related entity",
                "tags": [
                    "Binaries"
                ],
                "parameters": [
                    {
                        "name": "app",
                        "in": "path",
                        "required": true,
                        "description": "The app ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/StoreBinaryRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`Binary`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/Binary"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/binaries\/{binary}": {
            "get": {
                "operationId": "getBinaryById",
                "summary": "Show a specific binary",
                "tags": [
                    "Binaries"
                ],
                "parameters": [
                    {
                        "name": "binary",
                        "in": "path",
                        "required": true,
                        "description": "The binary ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`Binary`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/Binary"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            },
            "delete": {
                "operationId": "deleteBinary",
                "summary": "Delete a specified binary",
                "tags": [
                    "Binaries"
                ],
                "parameters": [
                    {
                        "name": "binary",
                        "in": "path",
                        "required": true,
                        "description": "The binary ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "null"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            },
            "put": {
                "operationId": "updateBinary",
                "summary": "Update a binary and the related entity",
                "tags": [
                    "Binaries"
                ],
                "parameters": [
                    {
                        "name": "binary",
                        "in": "path",
                        "required": true,
                        "description": "The binary ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/UpdateBinaryRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`Binary`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/Binary"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/binaries\/{binary}\/refresh": {
            "put": {
                "operationId": "refreshBinary",
                "summary": "Refresh a binary and the related entity",
                "tags": [
                    "Binaries"
                ],
                "parameters": [
                    {
                        "name": "binary",
                        "in": "path",
                        "required": true,
                        "description": "The binary ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/Binary"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/apps\/{app}\/services": {
            "get": {
                "operationId": "getServers",
                "summary": "Show all services",
                "tags": [
                    "Docker",
                    "DockerService"
                ],
                "parameters": [
                    {
                        "name": "app",
                        "in": "path",
                        "required": true,
                        "description": "The app ID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "description": "The number of items to be shown per page.\nUse `-1` to display all results on a single page.\nDefault: `10`",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Specifies the page number to retrieve in the paginated results.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated set of `CustomDockerServiceResource`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#\/components\/schemas\/Server"
                                            }
                                        },
                                        "meta": {
                                            "type": "object",
                                            "properties": {
                                                "current_page": {
                                                    "type": "integer"
                                                },
                                                "from": {
                                                    "type": [
                                                        "integer",
                                                        "null"
                                                    ]
                                                },
                                                "last_page": {
                                                    "type": "integer"
                                                },
                                                "links": {
                                                    "type": "array",
                                                    "description": "Generated paginator links.",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "url": {
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "label": {
                                                                "type": "string"
                                                            },
                                                            "active": {
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "required": [
                                                            "url",
                                                            "label",
                                                            "active"
                                                        ]
                                                    }
                                                },
                                                "path": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ],
                                                    "description": "Base path for paginator generated URLs."
                                                },
                                                "per_page": {
                                                    "type": "integer",
                                                    "description": "Number of items shown per page."
                                                },
                                                "to": {
                                                    "type": [
                                                        "integer",
                                                        "null"
                                                    ],
                                                    "description": "Number of the last item in the slice."
                                                },
                                                "total": {
                                                    "type": "integer",
                                                    "description": "Total number of items being paginated."
                                                }
                                            },
                                            "required": [
                                                "current_page",
                                                "from",
                                                "last_page",
                                                "links",
                                                "path",
                                                "per_page",
                                                "to",
                                                "total"
                                            ]
                                        },
                                        "links": {
                                            "type": "object",
                                            "properties": {
                                                "first": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "last": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "prev": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "next": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "first",
                                                "last",
                                                "prev",
                                                "next"
                                            ]
                                        }
                                    },
                                    "required": [
                                        "data",
                                        "links",
                                        "meta"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/apps\/{app}\/services\/{dockerService}": {
            "get": {
                "operationId": "getServerById",
                "summary": "Display a specific service",
                "tags": [
                    "Docker",
                    "DockerService"
                ],
                "parameters": [
                    {
                        "name": "app",
                        "in": "path",
                        "required": true,
                        "description": "The app ID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "dockerService",
                        "in": "path",
                        "required": true,
                        "description": "The docker service ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`Server`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/Server"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/docker-registries": {
            "get": {
                "operationId": "getDockerRegistries",
                "summary": "Show all docker registries",
                "tags": [
                    "Docker",
                    "DockerRegistry"
                ],
                "responses": {
                    "200": {
                        "description": "`DockerRegistryCollection`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/DockerRegistryCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    }
                }
            },
            "post": {
                "operationId": "createDockerRegistry",
                "summary": "Create a new docker registry",
                "tags": [
                    "Docker",
                    "DockerRegistry"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/StoreDockerRegistryRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`DockerRegistry`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/DockerRegistry"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/docker-registries\/{dockerRegistry}": {
            "get": {
                "operationId": "getDockerRegistryById",
                "summary": "Display a specific docker registry",
                "tags": [
                    "Docker",
                    "DockerRegistry"
                ],
                "parameters": [
                    {
                        "name": "dockerRegistry",
                        "in": "path",
                        "required": true,
                        "description": "The docker registry ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`DockerRegistry`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/DockerRegistry"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            },
            "put": {
                "operationId": "updateDockerRegistry",
                "summary": "Update a specific docker registry",
                "tags": [
                    "Docker",
                    "DockerRegistry"
                ],
                "parameters": [
                    {
                        "name": "dockerRegistry",
                        "in": "path",
                        "required": true,
                        "description": "The docker registry ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/UpdateDockerRegistryRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`DockerRegistry`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/DockerRegistry"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            },
            "delete": {
                "operationId": "deleteDockerRegistry",
                "summary": "Delete a specific docker registry",
                "tags": [
                    "Docker",
                    "DockerRegistry"
                ],
                "parameters": [
                    {
                        "name": "dockerRegistry",
                        "in": "path",
                        "required": true,
                        "description": "The docker registry ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "null"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/docker-registries\/{dockerRegistry}\/tagged-images": {
            "get": {
                "operationId": "getTaggedImages",
                "summary": "List all available tagged images",
                "tags": [
                    "Docker",
                    "DockerRegistry"
                ],
                "parameters": [
                    {
                        "name": "dockerRegistry",
                        "in": "path",
                        "required": true,
                        "description": "The docker registry ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`TaggedImageCollection`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/TaggedImageCollection"
                                        },
                                        "meta": {
                                            "$ref": "#\/components\/schemas\/TaggedImageMetaData"
                                        }
                                    },
                                    "required": [
                                        "data",
                                        "meta"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    }
                }
            }
        },
        "\/v1\/docker-registries\/{dockerRegistry}\/tagged-images\/refresh": {
            "get": {
                "operationId": "refreshTaggedImages",
                "summary": "Refresh the cache for all available tagged images",
                "tags": [
                    "Docker",
                    "DockerRegistry"
                ],
                "parameters": [
                    {
                        "name": "dockerRegistry",
                        "in": "path",
                        "required": true,
                        "description": "The docker registry ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`TaggedImageCollection`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#\/components\/schemas\/TaggedImageCollection"
                                        },
                                        "meta": {
                                            "$ref": "#\/components\/schemas\/TaggedImageMetaData"
                                        }
                                    },
                                    "required": [
                                        "data",
                                        "meta"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    }
                }
            }
        },
        "\/v1\/services\/{dockerService}\/logs": {
            "get": {
                "operationId": "getServerLogs",
                "summary": "Get stdout and stderr logs from the latest gameserver task",
                "tags": [
                    "Docker",
                    "DockerService"
                ],
                "parameters": [
                    {
                        "name": "dockerService",
                        "in": "path",
                        "required": true,
                        "description": "The docker service ID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "since",
                        "in": "query",
                        "description": "A duration used to calculate start relative to end. If end is in the future, start is calculated as this duration before now. Any value specified for start supersedes this parameter. Default: 7d",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "The max number of entries to return. Default: 100",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "direction",
                        "in": "query",
                        "description": "Determines the sort order of logs. Supported values are forward or backward. Default: forward",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "streamSource",
                        "in": "query",
                        "description": "Only return logs filtered by stream source like stdout or stderr. Default: null",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`ServiceLogs`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/ServiceLogs"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/services\/{dockerService}\/backup": {
            "post": {
                "operationId": "createBackup",
                "summary": "Creates a backup",
                "tags": [
                    "Docker",
                    "DockerService"
                ],
                "parameters": [
                    {
                        "name": "dockerService",
                        "in": "path",
                        "required": true,
                        "description": "The docker service ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/CreateBackupDockerServiceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "null"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            },
            "get": {
                "operationId": "getLatestBackup",
                "summary": "Display the latest backup",
                "tags": [
                    "Docker",
                    "DockerService"
                ],
                "parameters": [
                    {
                        "name": "dockerService",
                        "in": "path",
                        "required": true,
                        "description": "The docker service ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`Backup`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/Backup"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/services\/{dockerService}\/restore": {
            "post": {
                "operationId": "restoreBackup",
                "summary": "Restore the latest backup",
                "tags": [
                    "Docker",
                    "DockerService"
                ],
                "parameters": [
                    {
                        "name": "dockerService",
                        "in": "path",
                        "required": true,
                        "description": "The docker service ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "null"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/services\/{dockerService}\/backups": {
            "get": {
                "operationId": "getBackups",
                "summary": "List all backups",
                "tags": [
                    "Docker",
                    "DockerService"
                ],
                "parameters": [
                    {
                        "name": "dockerService",
                        "in": "path",
                        "required": true,
                        "description": "The docker service ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`DockerBackupCollection`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/DockerBackupCollection"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/services\/{dockerService}\/backup\/download": {
            "get": {
                "operationId": "getServerBackupDownloadUrl",
                "summary": "Generate a presigned URL for downloading the latest backup from AWS S3",
                "tags": [
                    "Docker",
                    "DockerService"
                ],
                "parameters": [
                    {
                        "name": "dockerService",
                        "in": "path",
                        "required": true,
                        "description": "The docker service ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`BackupDownload`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/BackupDownload"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/services\/{dockerService}\/restart": {
            "post": {
                "operationId": "restartServer",
                "summary": "Restart the service",
                "tags": [
                    "Docker",
                    "DockerService"
                ],
                "parameters": [
                    {
                        "name": "dockerService",
                        "in": "path",
                        "required": true,
                        "description": "The docker service ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "null"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/nodes\/locations": {
            "get": {
                "operationId": "getLocations",
                "summary": "Show a unique listing of locations based on active and ready worker nodes",
                "tags": [
                    "Nodes"
                ],
                "responses": {
                    "200": {
                        "description": "`LocationCollection`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/LocationCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    }
                }
            }
        },
        "\/v1\/resource-packages": {
            "get": {
                "operationId": "getResourcePackages",
                "summary": "Show all available resource packages",
                "tags": [
                    "ResourcePackage"
                ],
                "responses": {
                    "200": {
                        "description": "`ResourcePackageCollection`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/ResourcePackageCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/resource-packages\/{resourcePackage}": {
            "get": {
                "operationId": "getResourcePackageById",
                "summary": "Show a specified resource package",
                "tags": [
                    "ResourcePackage"
                ],
                "parameters": [
                    {
                        "name": "resourcePackage",
                        "in": "path",
                        "required": true,
                        "description": "The resource package ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`ResourcePackage`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/ResourcePackage"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/apps\/{app}\/configs": {
            "get": {
                "operationId": "getServerConfigs",
                "summary": "Show all server configs",
                "tags": [
                    "ServerConfig"
                ],
                "parameters": [
                    {
                        "name": "app",
                        "in": "path",
                        "required": true,
                        "description": "The app ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`ServerConfigCollection`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/ServerConfigCollection"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            },
            "post": {
                "operationId": "createServerConfig",
                "summary": "Create a new server config",
                "tags": [
                    "ServerConfig"
                ],
                "parameters": [
                    {
                        "name": "app",
                        "in": "path",
                        "required": true,
                        "description": "The app ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/StoreServerConfigRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`ServerConfig`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/ServerConfig"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/server-configs\/{serverConfig}": {
            "get": {
                "operationId": "getServerConfigById",
                "summary": "Show a specific server config",
                "tags": [
                    "ServerConfig"
                ],
                "parameters": [
                    {
                        "name": "serverConfig",
                        "in": "path",
                        "required": true,
                        "description": "The server config ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`ServerConfig`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/ServerConfig"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            },
            "delete": {
                "operationId": "deleteServerConfig",
                "summary": "Delete a specific server config",
                "tags": [
                    "ServerConfig"
                ],
                "parameters": [
                    {
                        "name": "serverConfig",
                        "in": "path",
                        "required": true,
                        "description": "The server config ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "null"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            },
            "put": {
                "operationId": "updateServerConfig",
                "summary": "Update a server config",
                "tags": [
                    "ServerConfig"
                ],
                "parameters": [
                    {
                        "name": "serverConfig",
                        "in": "path",
                        "required": true,
                        "description": "The server config ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application\/json": {
                            "schema": {
                                "$ref": "#\/components\/schemas\/UpdateServerConfigRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`ServerConfig`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/ServerConfig"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/binaries\/steam\/launchers": {
            "get": {
                "operationId": "steamGetLauncher",
                "summary": "Get launchers for a specific steamworks app ID, optionally filtered by OS",
                "tags": [
                    "Steam"
                ],
                "parameters": [
                    {
                        "name": "appId",
                        "in": "query",
                        "required": true,
                        "description": "The steamworks app id",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "os",
                        "in": "query",
                        "description": "The operating system of the binary",
                        "schema": {
                            "$ref": "#\/components\/schemas\/OperatingSystem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`SteamLauncherCollection`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/SteamLauncherCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/binaries\/steam\/branches": {
            "get": {
                "operationId": "steamGetBranches",
                "summary": "Get branches for a specific steamworks app ID",
                "tags": [
                    "Steam"
                ],
                "parameters": [
                    {
                        "name": "appId",
                        "in": "query",
                        "required": true,
                        "description": "The steamworks app id",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`SteamBranchCollection`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/SteamBranchCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "App": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of the app"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the app"
                    },
                    "inUse": {
                        "type": "boolean",
                        "description": "Indicates whether the app is currently in use"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "inUse"
                ],
                "title": "App"
            },
            "AppCollection": {
                "type": "array",
                "items": {
                    "$ref": "#\/components\/schemas\/App"
                },
                "title": "AppCollection"
            },
            "AppLocationSetting": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of the app location setting"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the app location setting"
                    },
                    "appId": {
                        "type": "integer",
                        "description": "The app id of the app location setting"
                    },
                    "serverConfigId": {
                        "type": "integer",
                        "description": "The server config id of the app location setting"
                    },
                    "numInstances": {
                        "type": "integer",
                        "description": "The number of instances that should run at the specific location"
                    },
                    "autoScalerEnabled": {
                        "type": "boolean",
                        "description": "Whether the auto scaler is enabled"
                    },
                    "autoScalerMin": {
                        "type": "integer",
                        "description": "The minimum number of instances that should run at the specific location"
                    },
                    "autoScalerMax": {
                        "type": "integer",
                        "description": "The maximum number of instances that should run at the specific location"
                    },
                    "status": {
                        "description": "The current status",
                        "$ref": "#\/components\/schemas\/AppLocationSettingStatus"
                    },
                    "statusMessage": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "An optional message"
                    },
                    "maintenance": {
                        "type": "boolean",
                        "description": "Indicates if the app location setting is under maintenance"
                    },
                    "inUse": {
                        "type": "boolean",
                        "description": "Indicates whether the app location setting is currently in use"
                    },
                    "placement": {
                        "description": "The placement to use",
                        "$ref": "#\/components\/schemas\/Placement"
                    },
                    "serverConfig": {
                        "description": "The server config to use",
                        "$ref": "#\/components\/schemas\/ServerConfig"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "appId",
                    "serverConfigId",
                    "numInstances",
                    "autoScalerEnabled",
                    "status",
                    "statusMessage",
                    "maintenance",
                    "inUse",
                    "placement"
                ],
                "title": "AppLocationSetting"
            },
            "AppLocationSettingCollection": {
                "type": "array",
                "items": {
                    "$ref": "#\/components\/schemas\/AppLocationSetting"
                },
                "title": "AppLocationSettingCollection"
            },
            "AppLocationSettingStatus": {
                "type": "string",
                "enum": [
                    "pending",
                    "creating",
                    "updating",
                    "deleting",
                    "upscaling",
                    "downscaling",
                    "error",
                    "ready"
                ],
                "title": "AppLocationSettingStatus"
            },
            "Architecture": {
                "type": "string",
                "enum": [
                    "x86_64"
                ],
                "title": "Architecture"
            },
            "Auth": {
                "type": "object",
                "properties": {
                    "token": {
                        "type": "string",
                        "description": "The authentication token, which must be used as a Bearer token in subsequent requests."
                    }
                },
                "required": [
                    "token"
                ],
                "title": "Auth"
            },
            "AuthRequest": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "description": "The email of the user",
                        "maxLength": 255
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the user"
                    },
                    "sid": {
                        "type": "string",
                        "description": "The fusion session id of the user",
                        "example": "1234567890ABCDEFG",
                        "maxLength": 191
                    }
                },
                "required": [
                    "email",
                    "password",
                    "sid"
                ],
                "title": "AuthRequest"
            },
            "Backup": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the backup"
                    },
                    "archiveName": {
                        "type": "string",
                        "description": "The name of the stored archive"
                    },
                    "backupMethod": {
                        "description": "The method of the archive",
                        "$ref": "#\/components\/schemas\/BackupType"
                    },
                    "awsRegion": {
                        "type": "string",
                        "description": "The AWS region the backup is stored at"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The timestamp of the backups creation"
                    },
                    "restoredAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time",
                        "description": "$restoredAt The timestamp of when the backup was restored, null if not restored"
                    }
                },
                "required": [
                    "name",
                    "archiveName",
                    "backupMethod",
                    "awsRegion",
                    "createdAt",
                    "restoredAt"
                ],
                "title": "Backup"
            },
            "BackupDownload": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "description": "The url where the file is available"
                    },
                    "validUntil": {
                        "type": "string",
                        "format": "date-time",
                        "description": "After this date the link is no longer valid"
                    }
                },
                "required": [
                    "url",
                    "validUntil"
                ],
                "title": "BackupDownload"
            },
            "BackupType": {
                "type": "string",
                "enum": [
                    "archive"
                ],
                "title": "BackupType"
            },
            "Binary": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of the binary"
                    },
                    "appId": {
                        "type": "integer",
                        "description": "The app id of the binary"
                    },
                    "name": {
                        "type": "string",
                        "description": "The app id of the binary"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the binary"
                    },
                    "type": {
                        "description": "The type of the binary",
                        "$ref": "#\/components\/schemas\/BinaryType"
                    },
                    "os": {
                        "description": "The operating system of the binary",
                        "$ref": "#\/components\/schemas\/OperatingSystem"
                    },
                    "maintenance": {
                        "type": "boolean",
                        "description": "Indicates if the binary is under maintenance"
                    },
                    "status": {
                        "description": "The current status of the binary",
                        "$ref": "#\/components\/schemas\/BinaryStatus"
                    },
                    "statusMessage": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "An optional message returned by the build process"
                    },
                    "progress": {
                        "type": [
                            "number",
                            "null"
                        ],
                        "description": "The current progress percentage of the image build (0-100)."
                    },
                    "progressMessage": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "A message describing the current build step."
                    },
                    "inUse": {
                        "type": "boolean",
                        "description": "Indicates whether the binary is currently in use"
                    },
                    "dockerImage": {
                        "description": "The docker image of the binary",
                        "$ref": "#\/components\/schemas\/DockerImage"
                    },
                    "dockerCompose": {
                        "description": "The docker compose file of the binary",
                        "$ref": "#\/components\/schemas\/DockerCompose"
                    },
                    "zipFile": {
                        "description": "The ZIP file of the binary",
                        "$ref": "#\/components\/schemas\/ZipFile"
                    },
                    "steam": {
                        "description": "The steam of the binary",
                        "$ref": "#\/components\/schemas\/Steam"
                    }
                },
                "required": [
                    "id",
                    "appId",
                    "name",
                    "version",
                    "type",
                    "os",
                    "maintenance",
                    "status",
                    "statusMessage",
                    "inUse"
                ],
                "title": "Binary"
            },
            "BinaryCollection": {
                "type": "array",
                "items": {
                    "$ref": "#\/components\/schemas\/Binary"
                },
                "title": "BinaryCollection"
            },
            "BinaryStatus": {
                "type": "string",
                "enum": [
                    "pending",
                    "building",
                    "deleting",
                    "updating",
                    "waiting",
                    "error",
                    "ready"
                ],
                "title": "BinaryStatus"
            },
            "BinaryType": {
                "type": "string",
                "enum": [
                    "zipFile",
                    "dockerImage",
                    "dockerCompose",
                    "steam"
                ],
                "title": "BinaryType"
            },
            "ConfigFile": {
                "type": "object",
                "properties": {
                    "target": {
                        "type": "string",
                        "description": "The path in the container"
                    },
                    "content": {
                        "type": "string",
                        "description": "The content of the config file"
                    }
                },
                "required": [
                    "target",
                    "content"
                ],
                "title": "ConfigFile"
            },
            "CreateBackupDockerServiceRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the backup",
                        "maxLength": 255
                    }
                },
                "required": [
                    "name"
                ],
                "title": "CreateBackupDockerServiceRequest"
            },
            "CreateUpdateDockerImage": {
                "type": "object",
                "properties": {
                    "imageName": {
                        "type": "string",
                        "description": "The name of the docker image"
                    },
                    "registryId": {
                        "type": "integer",
                        "description": "The id of the registry to load the image"
                    }
                },
                "required": [
                    "imageName",
                    "registryId"
                ],
                "title": "CreateUpdateDockerImage"
            },
            "CreateUpdatePlacement": {
                "type": "object",
                "properties": {
                    "constraints": {
                        "description": "The constraints to use",
                        "$ref": "#\/components\/schemas\/Location"
                    }
                },
                "required": [
                    "constraints"
                ],
                "title": "CreateUpdatePlacement"
            },
            "CreateUpdateSteam": {
                "type": "object",
                "properties": {
                    "steamAppId": {
                        "type": "integer",
                        "description": "The Steam App ID"
                    },
                    "branch": {
                        "type": "string",
                        "description": "The branch to use"
                    },
                    "password": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The password to use"
                    },
                    "command": {
                        "type": "string",
                        "description": "The command to execute"
                    },
                    "steamcmdUsername": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The steam account username"
                    },
                    "steamcmdPassword": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The steam account password"
                    },
                    "headful": {
                        "type": "boolean",
                        "description": "Whether or not the binary needs a graphical interface"
                    },
                    "requestLicense": {
                        "type": "boolean",
                        "description": "Whether or not the the license agreement needs to be requested"
                    },
                    "runtime": {
                        "description": "The steam runtime the server depends on",
                        "$ref": "#\/components\/schemas\/SteamRuntime"
                    },
                    "additionalPackages": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "A space-separated list of additional packages to install"
                    },
                    "unpublished": {
                        "type": "boolean",
                        "description": "Whether or not the steamworks app is unpublished or published"
                    }
                },
                "required": [
                    "steamAppId",
                    "branch",
                    "password",
                    "command",
                    "steamcmdUsername",
                    "steamcmdPassword",
                    "headful",
                    "requestLicense",
                    "runtime",
                    "additionalPackages",
                    "unpublished"
                ],
                "title": "CreateUpdateSteam"
            },
            "DockerBackupCollection": {
                "type": "array",
                "items": {
                    "$ref": "#\/components\/schemas\/Backup"
                },
                "title": "DockerBackupCollection"
            },
            "DockerCompose": {
                "type": "object",
                "properties": {
                    "composeFile": {
                        "type": "string",
                        "description": "The content of the docker compose file"
                    }
                },
                "required": [
                    "composeFile"
                ],
                "title": "DockerCompose"
            },
            "DockerImage": {
                "type": "object",
                "properties": {
                    "imageName": {
                        "type": "string",
                        "description": "The name of the docker image"
                    },
                    "registryId": {
                        "type": "integer",
                        "description": "The id of the registry to load the image"
                    },
                    "inUse": {
                        "type": "boolean",
                        "description": "Indicates whether the docker image is currently in use"
                    }
                },
                "required": [
                    "imageName",
                    "registryId",
                    "inUse"
                ],
                "title": "DockerImage"
            },
            "DockerRegistry": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The ID of the registry"
                    },
                    "type": {
                        "description": "The type of the registry",
                        "$ref": "#\/components\/schemas\/DockerRegistryType"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the registry"
                    },
                    "username": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The username to use for authentication"
                    },
                    "password": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The password to use for authentication"
                    },
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "description": "The URL of the registry"
                    },
                    "accessToken": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The access token to use for authentication"
                    },
                    "instanceUrl": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "uri",
                        "description": "The URL of the instance"
                    },
                    "organization": {
                        "type": "boolean",
                        "description": "Whether or not the registry is user-owned or organization-owned"
                    },
                    "awsAccessKey": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "AWS access key ID"
                    },
                    "awsSecretAccessKey": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "AWS secret access key"
                    }
                },
                "required": [
                    "id",
                    "type",
                    "name",
                    "username",
                    "password",
                    "url",
                    "accessToken",
                    "instanceUrl",
                    "organization",
                    "awsAccessKey",
                    "awsSecretAccessKey"
                ],
                "title": "DockerRegistry"
            },
            "DockerRegistryCollection": {
                "type": "array",
                "items": {
                    "$ref": "#\/components\/schemas\/DockerRegistry"
                },
                "title": "DockerRegistryCollection"
            },
            "DockerRegistryType": {
                "type": "string",
                "enum": [
                    "default",
                    "gitlab",
                    "github",
                    "custom",
                    "dockerhub",
                    "azure",
                    "awsecr",
                    "other"
                ],
                "title": "DockerRegistryType"
            },
            "EnvironmentVariable": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The key of the environment variable"
                    },
                    "value": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The value of the environment variable"
                    }
                },
                "required": [
                    "key",
                    "value"
                ],
                "title": "EnvironmentVariable"
            },
            "EnvironmentVariableDefinition": {
                "type": "object",
                "properties": {
                    "type": {
                        "description": "The type of the environment variable",
                        "$ref": "#\/components\/schemas\/EnvironmentVariableType"
                    },
                    "key": {
                        "type": "string",
                        "description": "The key of the variable"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the variable"
                    },
                    "variable": {
                        "type": "string",
                        "description": "The variable definition of the environment variable"
                    }
                },
                "required": [
                    "type",
                    "key"
                ],
                "title": "EnvironmentVariableDefinition"
            },
            "EnvironmentVariableType": {
                "type": "string",
                "enum": [
                    "static",
                    "system",
                    "port"
                ],
                "title": "EnvironmentVariableType"
            },
            "Location": {
                "type": "object",
                "properties": {
                    "city": {
                        "type": "string",
                        "description": "The name of the city"
                    },
                    "cityDisplay": {
                        "type": "string",
                        "description": "The display-friendly name of the city"
                    },
                    "continent": {
                        "type": "string",
                        "description": "The continent name"
                    },
                    "country": {
                        "type": "string",
                        "description": "The country name"
                    },
                    "isProtected": {
                        "type": "boolean",
                        "description": "Indicates if the location is password protected"
                    }
                },
                "required": [
                    "city",
                    "cityDisplay",
                    "continent",
                    "country",
                    "isProtected"
                ],
                "title": "Location"
            },
            "LocationCollection": {
                "type": "array",
                "items": {
                    "$ref": "#\/components\/schemas\/Location"
                },
                "title": "LocationCollection"
            },
            "Mount": {
                "type": "object",
                "properties": {
                    "target": {
                        "type": "string",
                        "description": "The path in the container"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Whether this mount point is read only"
                    }
                },
                "required": [
                    "target",
                    "readOnly"
                ],
                "title": "Mount"
            },
            "Node": {
                "type": "object",
                "properties": {
                    "hostname": {
                        "type": "string",
                        "description": "The hostname of the node"
                    },
                    "architecture": {
                        "description": "The architecture of the node (e.g., 'x86_64')",
                        "$ref": "#\/components\/schemas\/Architecture"
                    },
                    "os": {
                        "description": "The operating system of the node",
                        "$ref": "#\/components\/schemas\/OperatingSystem"
                    },
                    "address": {
                        "type": "string",
                        "description": "The IP address of the node"
                    }
                },
                "required": [
                    "hostname",
                    "architecture",
                    "os",
                    "address"
                ],
                "title": "Node"
            },
            "OperatingSystem": {
                "type": "string",
                "enum": [
                    "windows",
                    "linux"
                ],
                "title": "OperatingSystem"
            },
            "Placement": {
                "type": "object",
                "properties": {
                    "constraints": {
                        "description": "The constraints to use",
                        "$ref": "#\/components\/schemas\/Location"
                    }
                },
                "required": [
                    "constraints"
                ],
                "title": "Placement"
            },
            "Port": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the port"
                    },
                    "protocol": {
                        "description": "The exposed protocol",
                        "$ref": "#\/components\/schemas\/Protocol"
                    },
                    "targetPort": {
                        "type": "integer",
                        "description": "The port to expose"
                    },
                    "publishedPort": {
                        "type": "integer",
                        "description": "Published Port Where the port is mapped to"
                    },
                    "publishMode": {
                        "description": "Defines whether the port uses the hosts network or the ingress network",
                        "$ref": "#\/components\/schemas\/PublishMode"
                    }
                },
                "required": [
                    "name",
                    "protocol",
                    "targetPort",
                    "publishedPort",
                    "publishMode"
                ],
                "title": "Port"
            },
            "PortDefinition": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the server config"
                    },
                    "protocols": {
                        "type": "array",
                        "description": "The protocols to expose",
                        "items": {
                            "$ref": "#\/components\/schemas\/Protocol"
                        }
                    },
                    "targetPort": {
                        "type": "integer",
                        "description": "The port to expose"
                    },
                    "publishMode": {
                        "description": "Defines whether the port uses the hosts network or the ingress network",
                        "$ref": "#\/components\/schemas\/PublishMode"
                    }
                },
                "required": [
                    "name",
                    "protocols",
                    "targetPort",
                    "publishMode"
                ],
                "title": "PortDefinition"
            },
            "Protocol": {
                "type": "string",
                "enum": [
                    "tcp",
                    "udp"
                ],
                "title": "Protocol"
            },
            "PublishMode": {
                "type": "string",
                "enum": [
                    "host",
                    "ingress"
                ],
                "title": "PublishMode"
            },
            "ResourceAllocations": {
                "type": "object",
                "properties": {
                    "limits": {
                        "description": "The limits set for the server",
                        "$ref": "#\/components\/schemas\/Resources"
                    },
                    "reservations": {
                        "description": "The resources that are reserved for the server",
                        "$ref": "#\/components\/schemas\/Resources"
                    }
                },
                "required": [
                    "limits",
                    "reservations"
                ],
                "title": "ResourceAllocations"
            },
            "ResourcePackage": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of the resource package"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the resource package"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the resource package"
                    },
                    "type": {
                        "description": "The type of the resource package",
                        "$ref": "#\/components\/schemas\/ResourcePackageType"
                    },
                    "cpuLimit": {
                        "type": "string",
                        "description": "The maximum CPU of the resource package"
                    },
                    "cpuReservation": {
                        "type": "string",
                        "description": "The minimum CPU of the resource package"
                    },
                    "memoryLimitMiB": {
                        "type": "integer",
                        "description": "The maximum memory in mebibytes (MiB) of the resource package"
                    },
                    "memoryReservationMiB": {
                        "type": "integer",
                        "description": "The minimum memory in mebibytes (MiB) of the resource package"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "slug",
                    "type",
                    "cpuLimit",
                    "cpuReservation",
                    "memoryLimitMiB",
                    "memoryReservationMiB"
                ],
                "title": "ResourcePackage"
            },
            "ResourcePackageCollection": {
                "type": "array",
                "items": {
                    "$ref": "#\/components\/schemas\/ResourcePackage"
                },
                "title": "ResourcePackageCollection"
            },
            "ResourcePackageType": {
                "type": "string",
                "enum": [
                    "shared",
                    "dedicated"
                ],
                "title": "ResourcePackageType"
            },
            "Resources": {
                "type": "object",
                "properties": {
                    "cpu": {
                        "type": "integer",
                        "description": "The amount of cpu to allocate in cores"
                    },
                    "memory": {
                        "type": "integer",
                        "description": "The amount of memory to allocate in GB"
                    }
                },
                "required": [
                    "cpu",
                    "memory"
                ],
                "title": "Resources"
            },
            "RestartPolicy": {
                "type": "object",
                "properties": {
                    "condition": {
                        "description": "The condition for a restart",
                        "$ref": "#\/components\/schemas\/RestartPolicyCondition"
                    }
                },
                "required": [
                    "condition"
                ],
                "title": "RestartPolicy"
            },
            "RestartPolicyCondition": {
                "type": "string",
                "enum": [
                    "none",
                    "any",
                    "on-failure"
                ],
                "title": "RestartPolicyCondition"
            },
            "SecretFile": {
                "type": "object",
                "properties": {
                    "target": {
                        "type": "string",
                        "description": "The path in the container"
                    },
                    "content": {
                        "type": "string",
                        "description": "The content of the secret file"
                    }
                },
                "required": [
                    "target",
                    "content"
                ],
                "title": "SecretFile"
            },
            "Server": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The ID of the service"
                    },
                    "appLocationSettingId": {
                        "type": "integer",
                        "description": "The ID of the location setting"
                    },
                    "instance": {
                        "type": "integer",
                        "description": "The ID of the instance"
                    },
                    "serverConfigId": {
                        "type": "integer",
                        "description": "The ID of the server config"
                    },
                    "serverConfigName": {
                        "type": "string",
                        "description": "The name of the server config"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service"
                    },
                    "status": {
                        "type": "string",
                        "description": "The current status"
                    },
                    "status_message": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "An optional message"
                    },
                    "isBackupable": {
                        "type": "boolean",
                        "description": "Indicates whether the service can be backed up"
                    },
                    "isRestorable": {
                        "type": "boolean",
                        "description": "Indicates whether the service can be restored"
                    },
                    "isPending": {
                        "type": "boolean",
                        "description": "Indicates whether the service is pending (not running) due to insufficient resources on the node."
                    },
                    "isNotFound": {
                        "type": "boolean",
                        "description": "Indicates whether the service is currently not found\/missing in the cluster."
                    },
                    "isHealthy": {
                        "type": "boolean",
                        "description": "Indicates whether the service is currently in an overall healthy state."
                    },
                    "maintenance": {
                        "type": "boolean",
                        "description": "Indicates if the service is under maintenance"
                    },
                    "ports": {
                        "type": "object",
                        "description": "The port definitions of the service",
                        "additionalProperties": {
                            "$ref": "#\/components\/schemas\/Port"
                        }
                    },
                    "env": {
                        "type": "array",
                        "description": "The environment variables of the service",
                        "items": {
                            "$ref": "#\/components\/schemas\/EnvironmentVariable"
                        }
                    },
                    "restartPolicy": {
                        "description": "The restart policy of the service",
                        "$ref": "#\/components\/schemas\/RestartPolicy"
                    },
                    "node": {
                        "description": "The assigned node",
                        "$ref": "#\/components\/schemas\/Node"
                    },
                    "location": {
                        "description": "The location of the node",
                        "$ref": "#\/components\/schemas\/Location"
                    },
                    "resources": {
                        "description": "The assigned resource package",
                        "$ref": "#\/components\/schemas\/ResourcePackage"
                    },
                    "backup": {
                        "description": "The last backup of the service",
                        "$ref": "#\/components\/schemas\/Backup"
                    },
                    "createdAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time",
                        "description": "When the service was created"
                    },
                    "updatedAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time",
                        "description": "When the service was last updated"
                    }
                },
                "required": [
                    "id",
                    "appLocationSettingId",
                    "instance",
                    "serverConfigId",
                    "serverConfigName",
                    "name",
                    "status",
                    "status_message",
                    "isBackupable",
                    "isRestorable",
                    "isPending",
                    "isNotFound",
                    "isHealthy",
                    "maintenance",
                    "ports",
                    "env",
                    "restartPolicy",
                    "node",
                    "location",
                    "resources",
                    "createdAt",
                    "updatedAt"
                ],
                "title": "Server"
            },
            "ServerCollection": {
                "type": "array",
                "items": {
                    "$ref": "#\/components\/schemas\/Server"
                },
                "title": "ServerCollection"
            },
            "ServerConfig": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of the server configuration"
                    },
                    "binaryId": {
                        "type": "integer",
                        "description": "The binary id of the server configuration"
                    },
                    "appId": {
                        "type": "integer",
                        "description": "The app id of the server configuration"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the server config"
                    },
                    "command": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The command to run in the container (overrides ENTRYPOINT of the Dockerfile)"
                    },
                    "args": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The arguments to pass to the command (overrides CMD of the Dockerfile)"
                    },
                    "notes": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The notes of the server config - to keep track of things and to inform colleagues"
                    },
                    "status": {
                        "description": "The current status",
                        "$ref": "#\/components\/schemas\/ServerConfigStatus"
                    },
                    "statusMessage": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "An optional message"
                    },
                    "maintenance": {
                        "type": "boolean",
                        "description": "Indicates if the server config is under maintenance"
                    },
                    "resourcePackageSlug": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The slug of the resource package used in this server config"
                    },
                    "inUse": {
                        "type": "boolean",
                        "description": "Indicates whether the server config is currently in use"
                    },
                    "restartPolicy": {
                        "description": "The policy used to restart this server",
                        "$ref": "#\/components\/schemas\/RestartPolicy"
                    },
                    "env": {
                        "type": "array",
                        "description": "The environment variable definitions to be used in this config",
                        "items": {
                            "$ref": "#\/components\/schemas\/EnvironmentVariableDefinition"
                        }
                    },
                    "mounts": {
                        "type": "array",
                        "description": "The mounts to use",
                        "items": {
                            "$ref": "#\/components\/schemas\/Mount"
                        }
                    },
                    "ports": {
                        "type": "array",
                        "description": "The ports to expose",
                        "items": {
                            "$ref": "#\/components\/schemas\/PortDefinition"
                        }
                    },
                    "configFiles": {
                        "type": "array",
                        "description": "The config files to use",
                        "items": {
                            "$ref": "#\/components\/schemas\/ConfigFile"
                        }
                    },
                    "secretFiles": {
                        "type": "array",
                        "description": "The secret files to use",
                        "items": {
                            "$ref": "#\/components\/schemas\/SecretFile"
                        }
                    },
                    "binary": {
                        "description": "The image that is used in this server config",
                        "$ref": "#\/components\/schemas\/Binary"
                    }
                },
                "required": [
                    "id",
                    "binaryId",
                    "appId",
                    "name",
                    "command",
                    "args",
                    "notes",
                    "status",
                    "statusMessage",
                    "maintenance",
                    "resourcePackageSlug",
                    "inUse",
                    "restartPolicy",
                    "env",
                    "mounts",
                    "ports",
                    "configFiles",
                    "secretFiles"
                ],
                "title": "ServerConfig"
            },
            "ServerConfigCollection": {
                "type": "array",
                "items": {
                    "$ref": "#\/components\/schemas\/ServerConfig"
                },
                "title": "ServerConfigCollection"
            },
            "ServerConfigStatus": {
                "type": "string",
                "enum": [
                    "pending",
                    "creating",
                    "updating",
                    "deleting",
                    "waiting",
                    "error",
                    "ready"
                ],
                "title": "ServerConfigStatus"
            },
            "ServiceLogs": {
                "type": "object",
                "properties": {
                    "logs": {
                        "type": "array",
                        "description": "The logs as an array of strings",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "required": [
                    "logs"
                ],
                "title": "ServiceLogs"
            },
            "Steam": {
                "type": "object",
                "properties": {
                    "steamAppId": {
                        "type": "integer",
                        "description": "The Steam App ID"
                    },
                    "branch": {
                        "type": "string",
                        "description": "The branch to use"
                    },
                    "password": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The password to use"
                    },
                    "command": {
                        "type": "string",
                        "description": "The command to execute"
                    },
                    "steamcmdUsername": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The steam account username"
                    },
                    "steamcmdPassword": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The steam account password"
                    },
                    "headful": {
                        "type": "boolean",
                        "description": "Whether or not the binary needs a graphical interface"
                    },
                    "requestLicense": {
                        "type": "boolean",
                        "description": "Whether or not the the license agreement needs to be requested"
                    },
                    "runtime": {
                        "description": "The steam runtime the server depends on",
                        "$ref": "#\/components\/schemas\/SteamRuntime"
                    },
                    "additionalPackages": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "A space-separated list of additional packages to install"
                    },
                    "unpublished": {
                        "type": "boolean",
                        "description": "Whether or not the steamworks app is unpublished or published"
                    },
                    "inUse": {
                        "type": "boolean",
                        "description": "Indicates whether the steam binary is currently in use"
                    }
                },
                "required": [
                    "steamAppId",
                    "branch",
                    "password",
                    "command",
                    "steamcmdUsername",
                    "steamcmdPassword",
                    "headful",
                    "requestLicense",
                    "runtime",
                    "additionalPackages",
                    "unpublished",
                    "inUse"
                ],
                "title": "Steam"
            },
            "SteamBranch": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the branch"
                    },
                    "buildid": {
                        "type": [
                            "integer",
                            "null"
                        ],
                        "description": "The unique identifier for the build"
                    },
                    "pwdrequired": {
                        "type": [
                            "boolean",
                            "null"
                        ],
                        "description": "Indicates whether a password is required"
                    },
                    "description": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "A brief description of the build"
                    },
                    "timeupdated": {
                        "type": [
                            "integer",
                            "null"
                        ],
                        "description": "Last updated timestamp (in Unix epoch format)"
                    }
                },
                "required": [
                    "name",
                    "buildid",
                    "pwdrequired",
                    "description",
                    "timeupdated"
                ],
                "title": "SteamBranch"
            },
            "SteamBranchCollection": {
                "type": "array",
                "items": {
                    "$ref": "#\/components\/schemas\/SteamBranch"
                },
                "title": "SteamBranchCollection"
            },
            "SteamLauncher": {
                "type": "object",
                "properties": {
                    "executable": {
                        "type": "string",
                        "description": "The executable path"
                    },
                    "arguments": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The arguments for the executable"
                    },
                    "osarch": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The OS architecture of the executable"
                    },
                    "oslist": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The OS of the executable"
                    },
                    "realm": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The realm of the executable"
                    },
                    "betakey": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The beta key of the executable"
                    },
                    "description": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The description of the executable"
                    }
                },
                "required": [
                    "executable",
                    "arguments",
                    "osarch",
                    "oslist",
                    "realm",
                    "betakey",
                    "description"
                ],
                "title": "SteamLauncher"
            },
            "SteamLauncherCollection": {
                "type": "array",
                "items": {
                    "$ref": "#\/components\/schemas\/SteamLauncher"
                },
                "title": "SteamLauncherCollection"
            },
            "SteamRuntime": {
                "type": "string",
                "enum": [
                    "scout",
                    "soldier",
                    "sniper"
                ],
                "title": "SteamRuntime"
            },
            "StoreAppLocationSettingRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the location setting",
                        "maxLength": 255
                    },
                    "serverConfigId": {
                        "type": "integer",
                        "description": "The id of the server configuration that should be deployed"
                    },
                    "numInstances": {
                        "type": "integer",
                        "description": "The number of instances that should run at the specific location",
                        "minimum": 1
                    },
                    "placement": {
                        "description": "The placement settings that define the location and other constraints",
                        "$ref": "#\/components\/schemas\/CreateUpdatePlacement"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password required to deploy services to a protected node location.\nRequired when the selected location is password-protected."
                    }
                },
                "required": [
                    "name",
                    "serverConfigId",
                    "numInstances"
                ],
                "title": "StoreAppLocationSettingRequest"
            },
            "StoreAppRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the app",
                        "maxLength": 255
                    }
                },
                "required": [
                    "name"
                ],
                "title": "StoreAppRequest"
            },
            "StoreBinaryRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the binary",
                        "maxLength": 255
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the binary",
                        "maxLength": 255
                    },
                    "type": {
                        "description": "The type of the binary",
                        "$ref": "#\/components\/schemas\/BinaryType"
                    },
                    "os": {
                        "description": "The operating system of the binary",
                        "$ref": "#\/components\/schemas\/OperatingSystem"
                    },
                    "dockerCompose": {
                        "description": "The docker compose settings",
                        "$ref": "#\/components\/schemas\/DockerCompose"
                    },
                    "zipFile": {
                        "description": "The zip file settings",
                        "$ref": "#\/components\/schemas\/ZipFile"
                    },
                    "steam": {
                        "description": "The steam settings",
                        "$ref": "#\/components\/schemas\/CreateUpdateSteam"
                    },
                    "dockerImage": {
                        "description": "The docker image settings",
                        "$ref": "#\/components\/schemas\/CreateUpdateDockerImage"
                    }
                },
                "required": [
                    "name",
                    "version",
                    "type",
                    "os"
                ],
                "title": "StoreBinaryRequest"
            },
            "StoreDockerRegistryRequest": {
                "type": "object",
                "properties": {
                    "type": {
                        "description": "The type of the docker registry",
                        "$ref": "#\/components\/schemas\/DockerRegistryType"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the docker registry",
                        "maxLength": 255
                    },
                    "url": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "uri",
                        "description": "The URL of the docker registry",
                        "maxLength": 255
                    },
                    "instanceUrl": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "uri",
                        "description": "The specific instance URL of the docker registry",
                        "maxLength": 255
                    },
                    "username": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The username to use for authentication",
                        "maxLength": 255
                    },
                    "accessToken": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The access token to use for authentication"
                    },
                    "password": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The password to use for authentication"
                    },
                    "organization": {
                        "type": "boolean",
                        "description": "Whether or not the registry is user-owned or organization-owned"
                    },
                    "awsAccessKey": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The AWS access key to use for authentication",
                        "maxLength": 255
                    },
                    "awsSecretAccessKey": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The AWS secret access key to use for authentication",
                        "maxLength": 255
                    }
                },
                "required": [
                    "type",
                    "name"
                ],
                "title": "StoreDockerRegistryRequest"
            },
            "StoreServerConfigRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the server configuration",
                        "maxLength": 255
                    },
                    "args": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The arguments to pass to the command (overrides CMD of the Dockerfile)",
                        "example": "\/usr\/local\/etc\/enshrouded\/bootstrap",
                        "maxLength": 255
                    },
                    "command": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The command to run in the container (overrides ENTRYPOINT of the Dockerfile)",
                        "maxLength": 255
                    },
                    "notes": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The notes of the server config - to keep track of things and to inform colleagues",
                        "maxLength": 255
                    },
                    "binaryId": {
                        "type": "integer",
                        "description": "The binary id of the server configuration"
                    },
                    "resourcePackageSlug": {
                        "type": "string",
                        "description": "The slug of the resource package",
                        "maxLength": 255
                    },
                    "configFiles": {
                        "type": "array",
                        "description": "The config files used in this server configuration",
                        "items": {
                            "$ref": "#\/components\/schemas\/ConfigFile"
                        }
                    },
                    "secretFiles": {
                        "type": "array",
                        "description": "The secret files used in this server configuration",
                        "items": {
                            "$ref": "#\/components\/schemas\/SecretFile"
                        }
                    },
                    "resources": {
                        "description": "The resources used in this server configuration",
                        "$ref": "#\/components\/schemas\/ResourceAllocations"
                    },
                    "restartPolicy": {
                        "description": "The restart policy of the server configuration",
                        "$ref": "#\/components\/schemas\/RestartPolicy"
                    },
                    "env": {
                        "type": "array",
                        "description": "The environment variables used in this server configuration",
                        "items": {
                            "$ref": "#\/components\/schemas\/EnvironmentVariableDefinition"
                        }
                    },
                    "mounts": {
                        "type": "array",
                        "description": "The mounts used in this server configuration",
                        "items": {
                            "$ref": "#\/components\/schemas\/Mount"
                        }
                    },
                    "ports": {
                        "type": "array",
                        "description": "The port definitions",
                        "items": {
                            "$ref": "#\/components\/schemas\/PortDefinition"
                        }
                    }
                },
                "required": [
                    "name",
                    "binaryId",
                    "resourcePackageSlug"
                ],
                "title": "StoreServerConfigRequest"
            },
            "TaggedImage": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the docker image including the tag."
                    },
                    "tag": {
                        "type": "string",
                        "description": "The tag of the docker image."
                    },
                    "repository": {
                        "type": "string",
                        "description": "The name of the repository."
                    },
                    "location": {
                        "type": "string",
                        "description": "The location URI of the tagged docker image."
                    }
                },
                "required": [
                    "name",
                    "tag",
                    "repository",
                    "location"
                ],
                "title": "TaggedImage"
            },
            "TaggedImageCollection": {
                "type": "array",
                "items": {
                    "$ref": "#\/components\/schemas\/TaggedImage"
                },
                "title": "TaggedImageCollection"
            },
            "TaggedImageMetaData": {
                "type": "object",
                "properties": {
                    "cached": {
                        "type": "boolean",
                        "description": "Whether the data was retrieved from the cache."
                    },
                    "cached_at": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "Timestamp of when the data was last cached."
                    }
                },
                "required": [
                    "cached",
                    "cached_at"
                ],
                "title": "TaggedImageMetaData"
            },
            "UpdateAppLocationSettingRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the location setting",
                        "maxLength": 255
                    },
                    "numInstances": {
                        "type": "integer",
                        "description": "The number of instances that should run at the specific location",
                        "minimum": 1
                    }
                },
                "required": [
                    "name",
                    "numInstances"
                ],
                "title": "UpdateAppLocationSettingRequest"
            },
            "UpdateAppRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the app",
                        "maxLength": 255
                    }
                },
                "required": [
                    "name"
                ],
                "title": "UpdateAppRequest"
            },
            "UpdateBinaryRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the binary",
                        "maxLength": 255
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the binary",
                        "maxLength": 255
                    },
                    "type": {
                        "description": "The type of the binary",
                        "$ref": "#\/components\/schemas\/BinaryType"
                    },
                    "os": {
                        "description": "The operating system of the binary",
                        "$ref": "#\/components\/schemas\/OperatingSystem"
                    },
                    "dockerCompose": {
                        "description": "The docker compose settings",
                        "$ref": "#\/components\/schemas\/DockerCompose"
                    },
                    "zipFile": {
                        "description": "The zip file settings",
                        "$ref": "#\/components\/schemas\/ZipFile"
                    },
                    "steam": {
                        "description": "The steam settings",
                        "$ref": "#\/components\/schemas\/CreateUpdateSteam"
                    },
                    "dockerImage": {
                        "description": "The docker image settings",
                        "$ref": "#\/components\/schemas\/CreateUpdateDockerImage"
                    }
                },
                "required": [
                    "name",
                    "version",
                    "type",
                    "os"
                ],
                "title": "UpdateBinaryRequest"
            },
            "UpdateDockerRegistryRequest": {
                "type": "object",
                "properties": {
                    "type": {
                        "description": "The type of the docker registry",
                        "$ref": "#\/components\/schemas\/DockerRegistryType"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the docker registry",
                        "maxLength": 255
                    },
                    "url": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "uri",
                        "description": "The URL of the docker registry",
                        "maxLength": 255
                    },
                    "instanceUrl": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "uri",
                        "description": "The URL of the gitlab instance",
                        "maxLength": 255
                    },
                    "username": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The username to use for authentication",
                        "maxLength": 255
                    },
                    "accessToken": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The access token to use for authentication"
                    },
                    "password": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The password to use for authentication"
                    },
                    "organization": {
                        "type": "boolean",
                        "description": "Whether or not the registry is user-owned or organization-owned"
                    },
                    "awsAccessKey": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The AWS access key to use for authentication",
                        "maxLength": 255
                    },
                    "awsSecretAccessKey": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The AWS secret access key to use for authentication",
                        "maxLength": 255
                    }
                },
                "required": [
                    "type",
                    "name"
                ],
                "title": "UpdateDockerRegistryRequest"
            },
            "UpdateServerConfigRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the server configuration",
                        "maxLength": 255
                    },
                    "args": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The arguments to pass to the command (overrides CMD of the Dockerfile)",
                        "example": "\/usr\/local\/etc\/enshrouded\/bootstrap",
                        "maxLength": 255
                    },
                    "command": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The command to run in the container (overrides ENTRYPOINT of the Dockerfile)",
                        "maxLength": 255
                    },
                    "notes": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The notes of the server config - to keep track of things and to inform colleagues",
                        "maxLength": 255
                    },
                    "binaryId": {
                        "type": "integer",
                        "description": "The binary id of the server configuration"
                    },
                    "resourcePackageSlug": {
                        "type": "string",
                        "description": "The slug of the resource package",
                        "maxLength": 255
                    },
                    "configFiles": {
                        "type": "array",
                        "description": "The config files used in this server configuration",
                        "items": {
                            "$ref": "#\/components\/schemas\/ConfigFile"
                        }
                    },
                    "secretFiles": {
                        "type": "array",
                        "description": "The secret files used in this server configuration",
                        "items": {
                            "$ref": "#\/components\/schemas\/SecretFile"
                        }
                    },
                    "resources": {
                        "description": "The resources used in this server configuration",
                        "$ref": "#\/components\/schemas\/ResourceAllocations"
                    },
                    "restartPolicy": {
                        "description": "The restart policy of the server configuration",
                        "$ref": "#\/components\/schemas\/RestartPolicy"
                    },
                    "env": {
                        "type": "array",
                        "description": "The environment variables used in this server configuration",
                        "items": {
                            "$ref": "#\/components\/schemas\/EnvironmentVariableDefinition"
                        }
                    },
                    "mounts": {
                        "type": "array",
                        "description": "The mounts used in this server configuration",
                        "items": {
                            "$ref": "#\/components\/schemas\/Mount"
                        }
                    },
                    "ports": {
                        "type": "array",
                        "description": "The port definitions",
                        "items": {
                            "$ref": "#\/components\/schemas\/PortDefinition"
                        }
                    }
                },
                "required": [
                    "name",
                    "binaryId",
                    "resourcePackageSlug"
                ],
                "title": "UpdateServerConfigRequest"
            },
            "ZipFile": {
                "type": "object",
                "properties": {
                    "zipFileUrl": {
                        "type": "string",
                        "description": "The URL to the ZIP file"
                    },
                    "commandLine": {
                        "type": "string",
                        "description": "The command line to use"
                    }
                },
                "required": [
                    "zipFileUrl",
                    "commandLine"
                ],
                "title": "ZipFile"
            }
        },
        "responses": {
            "ModelNotFoundException": {
                "description": "Not found",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "description": "Error overview."
                                }
                            },
                            "required": [
                                "message"
                            ]
                        }
                    }
                }
            },
            "AuthenticationException": {
                "description": "Unauthenticated",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "description": "Error overview."
                                }
                            },
                            "required": [
                                "message"
                            ]
                        }
                    }
                }
            },
            "ValidationException": {
                "description": "Validation error",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "description": "Errors overview."
                                },
                                "errors": {
                                    "type": "object",
                                    "description": "A detailed description of each field that failed validation.",
                                    "additionalProperties": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "required": [
                                "message",
                                "errors"
                            ]
                        }
                    }
                }
            },
            "AuthorizationException": {
                "description": "Authorization error",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "description": "Error overview."
                                }
                            },
                            "required": [
                                "message"
                            ]
                        }
                    }
                }
            }
        }
    }
}