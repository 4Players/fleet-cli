{
    "openapi": "3.1.0",
    "info": {
        "title": "ODIN Fleet API",
        "version": "0.8.1",
        "description": "API to access Odin Fleet, empowering developers to deploy gameservers all around the world in just a few lines of code."
    },
    "servers": [
        {
            "url": "https:\/\/fleet.4players.io\/api",
            "description": "production"
        }
    ],
    "paths": {
        "\/v1\/app-location-settings\/{appLocationSetting}": {
            "put": {
                "operationId": "updateAppLocationSetting",
                "summary": "Update a location setting",
                "tags": [
                    "AppLocationSettings"
                ],
                "parameters": [
                    {
                        "name": "appLocationSetting",
                        "in": "path",
                        "required": true,
                        "description": "The app location setting ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the location setting"
                                    },
                                    "serverConfigId": {
                                        "type": "integer",
                                        "description": "The id of the server configuration that should be deployed"
                                    },
                                    "autoScalerEnabled": {
                                        "type": "boolean",
                                        "description": "Whether auto scaler is enabled"
                                    },
                                    "autoScalerMin": {
                                        "type": "integer",
                                        "description": "The minimum number of instances that should run at the specific location",
                                        "minimum": 0
                                    },
                                    "autoScalerMax": {
                                        "type": "integer",
                                        "description": "The maximum number of instances that should run at the specific location"
                                    },
                                    "numInstances": {
                                        "type": "integer",
                                        "description": "The number of instances that should run at the specific location",
                                        "minimum": 1
                                    },
                                    "placement": {
                                        "description": "The placement settings that define the location and other constraints",
                                        "$ref": "#\/components\/schemas\/Placement"
                                    }
                                },
                                "required": [
                                    "name",
                                    "serverConfigId",
                                    "autoScalerEnabled",
                                    "numInstances"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`AppLocationSetting`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/AppLocationSetting"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            },
            "delete": {
                "operationId": "deleteAppLocationSetting",
                "summary": "Delete a location setting",
                "tags": [
                    "AppLocationSettings"
                ],
                "parameters": [
                    {
                        "name": "appLocationSetting",
                        "in": "path",
                        "required": true,
                        "description": "The app location setting ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "null"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/apps\/{app}\/location-settings": {
            "get": {
                "operationId": "getAppLocationSettings",
                "summary": "Show all location settings",
                "tags": [
                    "AppLocationSettings"
                ],
                "parameters": [
                    {
                        "name": "app",
                        "in": "path",
                        "required": true,
                        "description": "The app ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`AppLocationSettingCollection`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/AppLocationSettingCollection"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    }
                }
            },
            "post": {
                "operationId": "createAppLocationSetting",
                "summary": "Create a new location setting",
                "tags": [
                    "AppLocationSettings"
                ],
                "parameters": [
                    {
                        "name": "app",
                        "in": "path",
                        "required": true,
                        "description": "The app ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the location setting"
                                    },
                                    "serverConfigId": {
                                        "type": "integer",
                                        "description": "The id of the server configuration that should be deployed"
                                    },
                                    "autoScalerEnabled": {
                                        "type": "boolean",
                                        "description": "Whether auto scaler is enabled"
                                    },
                                    "autoScalerMin": {
                                        "type": [
                                            "integer",
                                            "null"
                                        ],
                                        "description": "The minimum number of instances that should run at the specific location",
                                        "minimum": 0
                                    },
                                    "autoScalerMax": {
                                        "type": [
                                            "integer",
                                            "null"
                                        ],
                                        "description": "The maximum number of instances that should run at the specific location"
                                    },
                                    "numInstances": {
                                        "type": "integer",
                                        "description": "The number of instances that should run at the specific location",
                                        "minimum": 1
                                    },
                                    "placement": {
                                        "description": "The placement settings that define the location and other constraints",
                                        "$ref": "#\/components\/schemas\/Placement"
                                    }
                                },
                                "required": [
                                    "name",
                                    "serverConfigId",
                                    "autoScalerEnabled",
                                    "numInstances"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`AppLocationSetting`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/AppLocationSetting"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/apps": {
            "get": {
                "operationId": "getApps",
                "summary": "Show all apps",
                "tags": [
                    "Apps"
                ],
                "responses": {
                    "200": {
                        "description": "`AppCollection`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/AppCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    }
                }
            },
            "post": {
                "operationId": "createApp",
                "summary": "Create an app",
                "tags": [
                    "Apps"
                ],
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the app"
                                    }
                                },
                                "required": [
                                    "name"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`App`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/App"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/apps\/{app}": {
            "get": {
                "operationId": "getAppById",
                "summary": "Show a specific app",
                "tags": [
                    "Apps"
                ],
                "parameters": [
                    {
                        "name": "app",
                        "in": "path",
                        "required": true,
                        "description": "The app ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`App`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/App"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            },
            "delete": {
                "operationId": "deleteApp",
                "description": "This method is responsible for deleting an App record from the database.\nIt locates the App instance using the provided ID, and if found, proceeds to delete it.\nUpon successful deletion, an HTTP 204 No Content response is returned, indicating\nthat the action was successful.",
                "summary": "Delete a specific app",
                "tags": [
                    "Apps"
                ],
                "parameters": [
                    {
                        "name": "app",
                        "in": "path",
                        "required": true,
                        "description": "The app ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "null"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/auth\/token": {
            "post": {
                "operationId": "getAuthToken",
                "description": "Validates the incoming request and attempts to authenticate the user based on the provided session ID.\nIf the user is authenticated successfully, it returns an AuthResource containing the user's bearer token.",
                "summary": "Handles user authentication",
                "tags": [
                    "Auth"
                ],
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "description": "The email of the user"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "The password of the user"
                                    },
                                    "sid": {
                                        "type": "string",
                                        "description": "The fusion session id of the user",
                                        "example": "1234567890ABCDEFG"
                                    }
                                },
                                "required": [
                                    "email",
                                    "password",
                                    "sid"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`Auth`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/Auth"
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            },
            "delete": {
                "operationId": "deleteAuthToken",
                "summary": "Handles the deletion of a user's authentication tokens",
                "tags": [
                    "Auth"
                ],
                "parameters": [
                    {
                        "name": "sid",
                        "in": "query",
                        "required": true,
                        "description": "The session id of the user",
                        "schema": {
                            "type": "string"
                        },
                        "example": "1234567890ABCDEFG"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "null"
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/apps\/{app}\/binaries": {
            "get": {
                "operationId": "getBinaries",
                "description": "Eager load file types and config templates to reduce the number of queries.",
                "summary": "Show all binaries",
                "tags": [
                    "Binaries"
                ],
                "parameters": [
                    {
                        "name": "app",
                        "in": "path",
                        "required": true,
                        "description": "The app ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`BinaryCollection`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/BinaryCollection"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            },
            "post": {
                "operationId": "createBinary",
                "summary": "Create a binary and the related file",
                "tags": [
                    "Binaries"
                ],
                "parameters": [
                    {
                        "name": "app",
                        "in": "path",
                        "required": true,
                        "description": "The app ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the binary"
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "The version of the binary"
                                    },
                                    "type": {
                                        "description": "The type of the binary",
                                        "$ref": "#\/components\/schemas\/BinaryType"
                                    },
                                    "os": {
                                        "description": "The operating system of the binary",
                                        "$ref": "#\/components\/schemas\/OperatingSystem"
                                    },
                                    "dockerCompose": {
                                        "description": "The docker compose settings",
                                        "$ref": "#\/components\/schemas\/DockerCompose"
                                    },
                                    "zipFile": {
                                        "description": "The zip file settings",
                                        "$ref": "#\/components\/schemas\/ZipFile"
                                    },
                                    "steam": {
                                        "description": "The steam settings",
                                        "$ref": "#\/components\/schemas\/Steam"
                                    },
                                    "dockerImage": {
                                        "description": "The docker image settings",
                                        "$ref": "#\/components\/schemas\/DockerImage"
                                    }
                                },
                                "required": [
                                    "name",
                                    "version",
                                    "type",
                                    "os"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`Binary`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/Binary"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/binaries\/{binary}": {
            "get": {
                "operationId": "getBinaryById",
                "summary": "Show a specific binary",
                "tags": [
                    "Binaries"
                ],
                "parameters": [
                    {
                        "name": "binary",
                        "in": "path",
                        "required": true,
                        "description": "The binary ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`Binary`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/Binary"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            },
            "delete": {
                "operationId": "deleteBinary",
                "description": "It first finds the Binary instance by its ID. If the instance is found, it is deleted.\nThe method then returns an HTTP 204 No Content response to indicate successful deletion.",
                "summary": "Delete a specified binary",
                "tags": [
                    "Binaries"
                ],
                "parameters": [
                    {
                        "name": "binary",
                        "in": "path",
                        "required": true,
                        "description": "The binary ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "null"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            },
            "put": {
                "operationId": "updateBinary",
                "summary": "Update a binary and the related file",
                "tags": [
                    "Binaries"
                ],
                "parameters": [
                    {
                        "name": "binary",
                        "in": "path",
                        "required": true,
                        "description": "The binary ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the binary"
                                    },
                                    "version": {
                                        "type": "string",
                                        "description": "The version of the binary"
                                    },
                                    "type": {
                                        "description": "The type of the binary",
                                        "$ref": "#\/components\/schemas\/BinaryType"
                                    },
                                    "os": {
                                        "description": "The operating system of the binary",
                                        "$ref": "#\/components\/schemas\/OperatingSystem"
                                    },
                                    "dockerCompose": {
                                        "description": "The docker compose settings",
                                        "$ref": "#\/components\/schemas\/DockerCompose"
                                    },
                                    "zipFile": {
                                        "description": "The zip file settings",
                                        "$ref": "#\/components\/schemas\/ZipFile"
                                    },
                                    "steam": {
                                        "description": "The steam settings",
                                        "$ref": "#\/components\/schemas\/Steam"
                                    },
                                    "dockerImage": {
                                        "description": "The docker image settings",
                                        "$ref": "#\/components\/schemas\/DockerImage"
                                    }
                                },
                                "required": [
                                    "name",
                                    "version",
                                    "type",
                                    "os"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`Binary`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/Binary"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/apps\/{app}\/services": {
            "get": {
                "operationId": "getServers",
                "summary": "Show all services for a given app",
                "tags": [
                    "Docker",
                    "DockerService"
                ],
                "parameters": [
                    {
                        "name": "app",
                        "in": "path",
                        "required": true,
                        "description": "Instance of the app to filter services by.",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`ServerCollection`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/ServerCollection"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    }
                }
            }
        },
        "\/v1\/apps\/{app}\/services\/{service}": {
            "get": {
                "operationId": "getServerById",
                "summary": "Display a specific DockerService associated with the given App",
                "tags": [
                    "Docker",
                    "DockerService"
                ],
                "parameters": [
                    {
                        "name": "app",
                        "in": "path",
                        "required": true,
                        "description": "The app ID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "service",
                        "in": "path",
                        "required": true,
                        "description": "The service ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`Server`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/Server"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/docker-registries": {
            "get": {
                "operationId": "getDockerRegistries",
                "summary": "Show all docker registries",
                "tags": [
                    "Docker",
                    "DockerRegistry"
                ],
                "responses": {
                    "200": {
                        "description": "`DockerRegistryCollection`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/DockerRegistryCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    }
                }
            },
            "post": {
                "operationId": "createDockerRegistry",
                "summary": "Create a new docker registry",
                "tags": [
                    "Docker",
                    "DockerRegistry"
                ],
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "description": "The type of the docker registry",
                                        "$ref": "#\/components\/schemas\/DockerRegistryType"
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the docker registry"
                                    },
                                    "url": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "description": "The URL of the docker registry"
                                    },
                                    "instanceUrl": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "description": "The URL of the gitlab instance"
                                    },
                                    "username": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "description": "The username to use for authentication"
                                    },
                                    "accessToken": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "description": "The access token to use for authentication"
                                    },
                                    "password": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "description": "The password to use for authentication"
                                    }
                                },
                                "required": [
                                    "type",
                                    "name"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`DockerRegistry`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/DockerRegistry"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/docker-registries\/{dockerRegistry}": {
            "get": {
                "operationId": "getDockerRegistryById",
                "summary": "Display a specific docker registry",
                "tags": [
                    "Docker",
                    "DockerRegistry"
                ],
                "parameters": [
                    {
                        "name": "dockerRegistry",
                        "in": "path",
                        "required": true,
                        "description": "The docker registry ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`DockerRegistry`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/DockerRegistry"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            },
            "put": {
                "operationId": "updateDockerRegistry",
                "summary": "Update a specific docker registry",
                "tags": [
                    "Docker",
                    "DockerRegistry"
                ],
                "parameters": [
                    {
                        "name": "dockerRegistry",
                        "in": "path",
                        "required": true,
                        "description": "The docker registry ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "description": "The type of the docker registry",
                                        "$ref": "#\/components\/schemas\/DockerRegistryType"
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the docker registry"
                                    },
                                    "url": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "description": "The URL of the docker registry"
                                    },
                                    "instanceUrl": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "description": "The URL of the instance"
                                    },
                                    "username": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "description": "The username to use for authentication"
                                    },
                                    "accessToken": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "description": "The access token to use for authentication"
                                    },
                                    "password": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "description": "The password to use for authentication"
                                    }
                                },
                                "required": [
                                    "type",
                                    "name"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`DockerRegistry`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/DockerRegistry"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            },
            "delete": {
                "operationId": "deleteDockerRegistry",
                "summary": "Delete a specific docker registry",
                "tags": [
                    "Docker",
                    "DockerRegistry"
                ],
                "parameters": [
                    {
                        "name": "dockerRegistry",
                        "in": "path",
                        "required": true,
                        "description": "The docker registry ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "null"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/services\/{service}\/logs": {
            "get": {
                "operationId": "getServerLogs",
                "summary": "Get stdout and stderr logs from a service or task",
                "tags": [
                    "Docker",
                    "DockerService"
                ],
                "parameters": [
                    {
                        "name": "service",
                        "in": "path",
                        "required": true,
                        "description": "The service ID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "details",
                        "in": "query",
                        "description": "details Flag",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "follow",
                        "in": "query",
                        "description": "follow Flag",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "stdout",
                        "in": "query",
                        "description": "stdout Flag",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "stderr",
                        "in": "query",
                        "description": "stderr Flag",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "since",
                        "in": "query",
                        "description": "since Flag",
                        "schema": {
                            "type": "integer",
                            "minimum": 0
                        }
                    },
                    {
                        "name": "timestamps",
                        "in": "query",
                        "description": "timestamps Flag",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "tail",
                        "in": "query",
                        "description": "tail options",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`ServiceLogs`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/ServiceLogs"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/services\/{service}\/backup": {
            "post": {
                "operationId": "createBackup",
                "summary": "Creates a backup of the service",
                "tags": [
                    "Docker",
                    "DockerService"
                ],
                "parameters": [
                    {
                        "name": "service",
                        "in": "path",
                        "required": true,
                        "description": "The service ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the backup"
                                    }
                                },
                                "required": [
                                    "name"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "null"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            },
            "get": {
                "operationId": "getMostRecentBackup",
                "summary": "Display the most recent backup for the specified Docker service",
                "tags": [
                    "Docker",
                    "DockerService"
                ],
                "parameters": [
                    {
                        "name": "service",
                        "in": "path",
                        "required": true,
                        "description": "The service ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`Backup`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/Backup"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/services\/{service}\/restore": {
            "post": {
                "operationId": "restoreBackup",
                "summary": "Restore a backup for a specified Docker service",
                "tags": [
                    "Docker",
                    "DockerService"
                ],
                "parameters": [
                    {
                        "name": "service",
                        "in": "path",
                        "required": true,
                        "description": "The service ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "null"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/services\/{service}\/backups": {
            "get": {
                "operationId": "getBackups",
                "summary": "List all backups for the specified Docker service",
                "tags": [
                    "Docker",
                    "DockerService"
                ],
                "parameters": [
                    {
                        "name": "service",
                        "in": "path",
                        "required": true,
                        "description": "The service ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`DockerBackupCollection`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/DockerBackupCollection"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/services\/{service}\/backup\/download": {
            "get": {
                "operationId": "getServerBackupDownloadUrl",
                "summary": "Generates a presigned URL for downloading a backup from AWS S3 if the backup method is 'archive'",
                "tags": [
                    "Docker",
                    "DockerService"
                ],
                "parameters": [
                    {
                        "name": "service",
                        "in": "path",
                        "required": true,
                        "description": "The service ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`BackupDownload`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/BackupDownload"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/services\/{service}\/restart": {
            "post": {
                "operationId": "restartServer",
                "summary": "Restarts a specific Docker service",
                "tags": [
                    "Docker",
                    "DockerService"
                ],
                "parameters": [
                    {
                        "name": "service",
                        "in": "path",
                        "required": true,
                        "description": "The service ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "202": {
                        "description": "",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "null"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/nodes\/locations": {
            "get": {
                "operationId": "getLocations",
                "description": "Synchronizes the local database with the state of Docker nodes,\nthen filters for active, ready worker nodes to create a unique listing of their\nlocation labels. These nodes are suitable for deployment.",
                "summary": "Show a unique listing of locations based on active and ready worker nodes",
                "tags": [
                    "Nodes"
                ],
                "responses": {
                    "200": {
                        "description": "`LocationCollection`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/LocationCollection"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    }
                }
            }
        },
        "\/v1\/apps\/{app}\/configs": {
            "get": {
                "operationId": "getServerConfigs",
                "summary": "Show all server configs",
                "tags": [
                    "ServerConfig"
                ],
                "parameters": [
                    {
                        "name": "app",
                        "in": "path",
                        "required": true,
                        "description": "The app ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`ServerConfigCollection`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/ServerConfigCollection"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            },
            "post": {
                "operationId": "createServerConfig",
                "summary": "Create a new server config",
                "tags": [
                    "ServerConfig"
                ],
                "parameters": [
                    {
                        "name": "app",
                        "in": "path",
                        "required": true,
                        "description": "The app ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the server configuration"
                                    },
                                    "args": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "description": "The arguments to pass to the command (overrides CMD of the Dockerfile)",
                                        "example": "\/usr\/local\/etc\/enshrouded\/bootstrap"
                                    },
                                    "command": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "description": "The command to run in the container (overrides ENTRYPOINT of the Dockerfile)"
                                    },
                                    "notes": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "description": "The notes of the server config - to keep track of things and to inform colleagues"
                                    },
                                    "binaryId": {
                                        "type": "integer",
                                        "description": "The binary id of the server configuration"
                                    },
                                    "configFiles": {
                                        "type": "array",
                                        "description": "The config files used in this server configuration",
                                        "items": {
                                            "$ref": "#\/components\/schemas\/ConfigFile"
                                        }
                                    },
                                    "secretFiles": {
                                        "type": "array",
                                        "description": "The secret files used in this server configuration",
                                        "items": {
                                            "$ref": "#\/components\/schemas\/SecretFile"
                                        }
                                    },
                                    "resources": {
                                        "description": "The resources used in this server configuration",
                                        "$ref": "#\/components\/schemas\/ResourceAllocations"
                                    },
                                    "restartPolicy": {
                                        "description": "The restart policy of the server configuration",
                                        "$ref": "#\/components\/schemas\/RestartPolicy"
                                    },
                                    "env": {
                                        "type": "array",
                                        "description": "The environment variables used in this server configuration",
                                        "items": {
                                            "$ref": "#\/components\/schemas\/EnvironmentVariableDefinition"
                                        }
                                    },
                                    "mounts": {
                                        "type": "array",
                                        "description": "The mounts used in this server configuration",
                                        "items": {
                                            "$ref": "#\/components\/schemas\/Mount"
                                        }
                                    },
                                    "ports": {
                                        "type": "array",
                                        "description": "The port definitions",
                                        "items": {
                                            "$ref": "#\/components\/schemas\/PortDefinition"
                                        }
                                    }
                                },
                                "required": [
                                    "name",
                                    "binaryId"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`ServerConfig`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/ServerConfig"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        },
        "\/v1\/server-configs\/{serverConfig}": {
            "get": {
                "operationId": "getServerConfigById",
                "summary": "Show a specific server config",
                "tags": [
                    "ServerConfig"
                ],
                "parameters": [
                    {
                        "name": "serverConfig",
                        "in": "path",
                        "required": true,
                        "description": "The server config ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`ServerConfig`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/ServerConfig"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            },
            "delete": {
                "operationId": "deleteServerConfig",
                "description": "This method handles the deletion of a ServerConfig record from the database.\nIt first finds the ServerConfig instance by its ID, and if found, deletes it.\nReturns an HTTP 204 No Content response upon successful deletion.",
                "summary": "Delete a specific server config",
                "tags": [
                    "ServerConfig"
                ],
                "parameters": [
                    {
                        "name": "serverConfig",
                        "in": "path",
                        "required": true,
                        "description": "The server config ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "type": "null"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            },
            "put": {
                "operationId": "updateServerConfig",
                "summary": "Update a server config",
                "tags": [
                    "ServerConfig"
                ],
                "parameters": [
                    {
                        "name": "serverConfig",
                        "in": "path",
                        "required": true,
                        "description": "The server config ID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application\/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "The name of the server configuration"
                                    },
                                    "args": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "description": "The arguments to pass to the command (overrides CMD of the Dockerfile)",
                                        "example": "\/usr\/local\/etc\/enshrouded\/bootstrap"
                                    },
                                    "command": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "description": "The command to run in the container (overrides ENTRYPOINT of the Dockerfile)"
                                    },
                                    "notes": {
                                        "type": [
                                            "string",
                                            "null"
                                        ],
                                        "description": "The notes of the server config - to keep track of things and to inform colleagues"
                                    },
                                    "binaryId": {
                                        "type": "integer",
                                        "description": "The binary id of the server configuration"
                                    },
                                    "configFiles": {
                                        "type": "array",
                                        "description": "The config files used in this server configuration",
                                        "items": {
                                            "$ref": "#\/components\/schemas\/ConfigFile"
                                        }
                                    },
                                    "secretFiles": {
                                        "type": "array",
                                        "description": "The secret files used in this server configuration",
                                        "items": {
                                            "$ref": "#\/components\/schemas\/SecretFile"
                                        }
                                    },
                                    "resources": {
                                        "description": "The resources used in this server configuration",
                                        "$ref": "#\/components\/schemas\/ResourceAllocations"
                                    },
                                    "restartPolicy": {
                                        "description": "The restart policy of the server configuration",
                                        "$ref": "#\/components\/schemas\/RestartPolicy"
                                    },
                                    "env": {
                                        "type": "array",
                                        "description": "The environment variables used in this server configuration",
                                        "items": {
                                            "$ref": "#\/components\/schemas\/EnvironmentVariableDefinition"
                                        }
                                    },
                                    "mounts": {
                                        "type": "array",
                                        "description": "The mounts used in this server configuration",
                                        "items": {
                                            "$ref": "#\/components\/schemas\/Mount"
                                        }
                                    },
                                    "ports": {
                                        "type": "array",
                                        "description": "The port definitions",
                                        "items": {
                                            "$ref": "#\/components\/schemas\/PortDefinition"
                                        }
                                    }
                                },
                                "required": [
                                    "name",
                                    "binaryId"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`ServerConfig`",
                        "content": {
                            "application\/json": {
                                "schema": {
                                    "$ref": "#\/components\/schemas\/ServerConfig"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#\/components\/responses\/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#\/components\/responses\/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#\/components\/responses\/ValidationException"
                    },
                    "403": {
                        "$ref": "#\/components\/responses\/AuthorizationException"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "App": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of the app"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the app"
                    }
                },
                "required": [
                    "id",
                    "name"
                ],
                "title": "App"
            },
            "AppCollection": {
                "type": "array",
                "items": {
                    "$ref": "#\/components\/schemas\/App"
                },
                "title": "AppCollection"
            },
            "AppLocationSetting": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of the app location setting"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the app location setting"
                    },
                    "appId": {
                        "type": "integer",
                        "description": "The app id of the app location setting"
                    },
                    "serverConfigId": {
                        "type": "integer",
                        "description": "The server config id of the app location setting"
                    },
                    "numInstances": {
                        "type": "integer",
                        "description": "The number of instances that should run at the specific location"
                    },
                    "autoScalerEnabled": {
                        "type": "boolean",
                        "description": "Whether the auto scaler is enabled"
                    },
                    "autoScalerMin": {
                        "type": "integer",
                        "description": "The minimum number of instances that should run at the specific location"
                    },
                    "autoScalerMax": {
                        "type": "integer",
                        "description": "The maximum number of instances that should run at the specific location"
                    },
                    "placement": {
                        "description": "The placement to use",
                        "$ref": "#\/components\/schemas\/Placement"
                    },
                    "serverConfig": {
                        "description": "The server config to use",
                        "$ref": "#\/components\/schemas\/ServerConfig"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "appId",
                    "serverConfigId",
                    "numInstances",
                    "autoScalerEnabled",
                    "placement"
                ],
                "title": "AppLocationSetting"
            },
            "AppLocationSettingCollection": {
                "type": "array",
                "items": {
                    "$ref": "#\/components\/schemas\/AppLocationSetting"
                },
                "title": "AppLocationSettingCollection"
            },
            "Auth": {
                "type": "object",
                "properties": {
                    "token": {
                        "type": "string",
                        "description": "The authentication token"
                    }
                },
                "required": [
                    "token"
                ],
                "title": "Auth"
            },
            "Backup": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the backup"
                    },
                    "archiveName": {
                        "type": "string",
                        "description": "The name of the stored archive"
                    },
                    "backupMethod": {
                        "description": "The method of the archive",
                        "$ref": "#\/components\/schemas\/BackupType"
                    },
                    "awsRegion": {
                        "type": "string",
                        "description": "The AWS region the backup is stored at"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The timestamp of the backups creation"
                    },
                    "restoredAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time",
                        "description": "$restoredAt The timestamp of when the backup was restored, null if not restored"
                    }
                },
                "required": [
                    "name",
                    "archiveName",
                    "backupMethod",
                    "awsRegion",
                    "createdAt",
                    "restoredAt"
                ],
                "title": "Backup"
            },
            "BackupDownload": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "description": "The url where the file is available"
                    },
                    "validUntil": {
                        "type": "string",
                        "format": "date-time",
                        "description": "After this date the link is no longer valid"
                    }
                },
                "required": [
                    "url",
                    "validUntil"
                ],
                "title": "BackupDownload"
            },
            "BackupType": {
                "type": "string",
                "enum": [
                    "archive"
                ],
                "title": "BackupType"
            },
            "Binary": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of the binary"
                    },
                    "appId": {
                        "type": "integer",
                        "description": "The app id of the binary"
                    },
                    "name": {
                        "type": "string",
                        "description": "The app id of the binary"
                    },
                    "version": {
                        "type": "string",
                        "description": "The version of the binary"
                    },
                    "type": {
                        "description": "The type of the binary",
                        "$ref": "#\/components\/schemas\/BinaryType"
                    },
                    "os": {
                        "description": "The operating system of the binary",
                        "$ref": "#\/components\/schemas\/OperatingSystem"
                    },
                    "ready": {
                        "type": "boolean",
                        "description": "Indicates whether the binary is ready for use."
                    },
                    "configTemplates": {
                        "type": "array",
                        "description": "The config templates of the binary",
                        "items": {
                            "$ref": "#\/components\/schemas\/ConfigTemplate"
                        }
                    },
                    "dockerImage": {
                        "description": "The docker image of the binary",
                        "$ref": "#\/components\/schemas\/DockerImage"
                    },
                    "dockerCompose": {
                        "description": "The docker compose file of the binary",
                        "$ref": "#\/components\/schemas\/DockerCompose"
                    },
                    "zipFile": {
                        "description": "The ZIP file of the binary",
                        "$ref": "#\/components\/schemas\/ZipFile"
                    },
                    "steam": {
                        "description": "The steam of the binary",
                        "$ref": "#\/components\/schemas\/Steam"
                    }
                },
                "required": [
                    "id",
                    "appId",
                    "name",
                    "version",
                    "type",
                    "os",
                    "ready"
                ],
                "title": "Binary"
            },
            "BinaryCollection": {
                "type": "array",
                "items": {
                    "$ref": "#\/components\/schemas\/Binary"
                },
                "title": "BinaryCollection"
            },
            "BinaryType": {
                "type": "string",
                "enum": [
                    "zipFile",
                    "dockerImage",
                    "dockerCompose",
                    "steam"
                ],
                "title": "BinaryType"
            },
            "ConfigFile": {
                "type": "object",
                "properties": {
                    "target": {
                        "type": "string",
                        "description": "The path in the container"
                    },
                    "content": {
                        "type": "string",
                        "description": "The content of the config file"
                    }
                },
                "required": [
                    "target",
                    "content"
                ],
                "title": "ConfigFile"
            },
            "ConfigTemplate": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The id of the config template"
                    },
                    "binaryId": {
                        "type": "string",
                        "description": "The binary id of the config template"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the config template"
                    },
                    "content": {
                        "type": "string",
                        "description": "The path in the container"
                    }
                },
                "required": [
                    "id",
                    "binaryId",
                    "name",
                    "content"
                ],
                "title": "ConfigTemplate"
            },
            "Constraints": {
                "type": "object",
                "properties": {
                    "country": {
                        "type": "string",
                        "description": "The country where the server should be placed - it defines a region as a fallback if no free resources are available in the city"
                    },
                    "city": {
                        "type": "string",
                        "description": "The city where the server should be placed"
                    }
                },
                "required": [
                    "country",
                    "city"
                ],
                "title": "Constraints"
            },
            "DockerBackupCollection": {
                "type": "array",
                "items": {
                    "$ref": "#\/components\/schemas\/Backup"
                },
                "title": "DockerBackupCollection"
            },
            "DockerCompose": {
                "type": "object",
                "properties": {
                    "composeFile": {
                        "type": "string",
                        "description": "The content of the docker compose file"
                    }
                },
                "required": [
                    "composeFile"
                ],
                "title": "DockerCompose"
            },
            "DockerImage": {
                "type": "object",
                "properties": {
                    "imageName": {
                        "type": "string",
                        "description": "The name of the docker image"
                    },
                    "registryId": {
                        "type": "integer",
                        "description": "The id of the registry to load the image"
                    }
                },
                "required": [
                    "imageName",
                    "registryId"
                ],
                "title": "DockerImage"
            },
            "DockerRegistry": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The ID of the registry"
                    },
                    "type": {
                        "description": "The type of the registry",
                        "$ref": "#\/components\/schemas\/DockerRegistryType"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the registry"
                    },
                    "username": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The username to use for authentication"
                    },
                    "password": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The password to use for authentication"
                    },
                    "url": {
                        "type": "string",
                        "format": "uri",
                        "description": "The URL of the registry"
                    },
                    "accessToken": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The access token to use for authentication"
                    },
                    "instanceUrl": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "uri",
                        "description": "The URL of the instance"
                    }
                },
                "required": [
                    "id",
                    "type",
                    "name",
                    "username",
                    "password",
                    "url",
                    "accessToken",
                    "instanceUrl"
                ],
                "title": "DockerRegistry"
            },
            "DockerRegistryCollection": {
                "type": "array",
                "items": {
                    "$ref": "#\/components\/schemas\/DockerRegistry"
                },
                "title": "DockerRegistryCollection"
            },
            "DockerRegistryType": {
                "type": "string",
                "enum": [
                    "dockerhub",
                    "github",
                    "gitlab",
                    "awsecr",
                    "azure",
                    "custom",
                    "default",
                    "proget",
                    "quay"
                ],
                "title": "DockerRegistryType"
            },
            "DockerTaskStatus": {
                "type": "object",
                "properties": {
                    "state": {
                        "type": "string",
                        "description": "The state of the task"
                    },
                    "message": {
                        "type": "string",
                        "description": "The message from the task"
                    },
                    "err": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The error from the task"
                    },
                    "timestamp": {
                        "type": "string",
                        "description": "The timestamp of the status request"
                    }
                },
                "required": [
                    "state",
                    "message",
                    "err",
                    "timestamp"
                ],
                "title": "DockerTaskStatus"
            },
            "EnvironmentVariable": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The key of the environment variable"
                    },
                    "value": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The value of the environment variable"
                    }
                },
                "required": [
                    "key",
                    "value"
                ],
                "title": "EnvironmentVariable"
            },
            "EnvironmentVariableDefinition": {
                "type": "object",
                "properties": {
                    "type": {
                        "description": "The type of the environment variable",
                        "$ref": "#\/components\/schemas\/EnvironmentVariableType"
                    },
                    "key": {
                        "type": "string",
                        "description": "The key of the variable"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the variable"
                    },
                    "variable": {
                        "type": "string",
                        "description": "The variable definition of the environment variable"
                    }
                },
                "required": [
                    "type",
                    "key"
                ],
                "title": "EnvironmentVariableDefinition"
            },
            "EnvironmentVariableType": {
                "type": "string",
                "enum": [
                    "static",
                    "system",
                    "port"
                ],
                "title": "EnvironmentVariableType"
            },
            "Location": {
                "type": "object",
                "properties": {
                    "city": {
                        "type": "string",
                        "description": "City"
                    },
                    "continent": {
                        "type": "string",
                        "description": "Continent"
                    },
                    "country": {
                        "type": "string",
                        "description": "Country"
                    }
                },
                "required": [
                    "city",
                    "continent",
                    "country"
                ],
                "title": "Location"
            },
            "LocationCollection": {
                "type": "array",
                "items": {
                    "$ref": "#\/components\/schemas\/Location"
                },
                "title": "LocationCollection"
            },
            "Mount": {
                "type": "object",
                "properties": {
                    "target": {
                        "type": "string",
                        "description": "The path in the container"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Whether this mount point is read only"
                    }
                },
                "required": [
                    "target",
                    "readOnly"
                ],
                "title": "Mount"
            },
            "OperatingSystem": {
                "type": "string",
                "enum": [
                    "windows",
                    "linux"
                ],
                "title": "OperatingSystem"
            },
            "Placement": {
                "type": "object",
                "properties": {
                    "constraints": {
                        "description": "The constraints to use",
                        "$ref": "#\/components\/schemas\/Constraints"
                    }
                },
                "required": [
                    "constraints"
                ],
                "title": "Placement"
            },
            "Port": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the port"
                    },
                    "protocol": {
                        "description": "The exposed protocol",
                        "$ref": "#\/components\/schemas\/Protocol"
                    },
                    "targetPort": {
                        "type": "integer",
                        "description": "The port to expose"
                    },
                    "publishedPort": {
                        "type": "integer",
                        "description": "Published Port Where the port is mapped to"
                    },
                    "publishMode": {
                        "description": "Defines whether the port uses the hosts network or the ingress network",
                        "$ref": "#\/components\/schemas\/PublishMode"
                    }
                },
                "required": [
                    "name",
                    "protocol",
                    "targetPort",
                    "publishedPort",
                    "publishMode"
                ],
                "title": "Port"
            },
            "PortDefinition": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the server config"
                    },
                    "protocols": {
                        "type": "array",
                        "description": "The protocols to expose",
                        "items": {
                            "$ref": "#\/components\/schemas\/Protocol"
                        }
                    },
                    "targetPort": {
                        "type": "integer",
                        "description": "The port to expose"
                    },
                    "publishMode": {
                        "description": "Defines whether the port uses the hosts network or the ingress network",
                        "$ref": "#\/components\/schemas\/PublishMode"
                    }
                },
                "required": [
                    "name",
                    "protocols",
                    "targetPort",
                    "publishMode"
                ],
                "title": "PortDefinition"
            },
            "Protocol": {
                "type": "string",
                "enum": [
                    "tcp",
                    "udp"
                ],
                "title": "Protocol"
            },
            "PublishMode": {
                "type": "string",
                "enum": [
                    "host",
                    "ingress"
                ],
                "title": "PublishMode"
            },
            "ResourceAllocations": {
                "type": "object",
                "properties": {
                    "limits": {
                        "description": "The limits set for the server",
                        "$ref": "#\/components\/schemas\/Resources"
                    },
                    "reservations": {
                        "description": "The resources that are reserved for the server",
                        "$ref": "#\/components\/schemas\/Resources"
                    }
                },
                "required": [
                    "limits",
                    "reservations"
                ],
                "title": "ResourceAllocations"
            },
            "Resources": {
                "type": "object",
                "properties": {
                    "cpu": {
                        "type": "integer",
                        "description": "The amount of cpu to allocate in cores"
                    },
                    "memory": {
                        "type": "integer",
                        "description": "The amount of memory to allocate in GB"
                    }
                },
                "required": [
                    "cpu",
                    "memory"
                ],
                "title": "Resources"
            },
            "RestartPolicy": {
                "type": "object",
                "properties": {
                    "condition": {
                        "description": "The condition for a restart",
                        "$ref": "#\/components\/schemas\/RestartPolicyCondition"
                    }
                },
                "required": [
                    "condition"
                ],
                "title": "RestartPolicy"
            },
            "RestartPolicyCondition": {
                "type": "string",
                "enum": [
                    "none",
                    "any",
                    "on-failure"
                ],
                "title": "RestartPolicyCondition"
            },
            "SecretFile": {
                "type": "object",
                "properties": {
                    "target": {
                        "type": "string",
                        "description": "The path in the container"
                    },
                    "content": {
                        "type": "string",
                        "description": "The content of the secret file"
                    }
                },
                "required": [
                    "target",
                    "content"
                ],
                "title": "SecretFile"
            },
            "Server": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The ID of the service"
                    },
                    "appLocationSettingId": {
                        "type": "integer",
                        "description": "The ID of the location setting"
                    },
                    "instance": {
                        "type": "integer",
                        "description": "The ID of the instance"
                    },
                    "name": {
                        "type": "string"
                    },
                    "addr": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "ipv4",
                        "description": "The IP address of the node"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the service was created"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "When the service was last updated"
                    },
                    "location": {
                        "description": "The location of the node",
                        "$ref": "#\/components\/schemas\/Location"
                    },
                    "env": {
                        "type": "object",
                        "description": "The environment variables of the service",
                        "additionalProperties": {
                            "$ref": "#\/components\/schemas\/EnvironmentVariable"
                        }
                    },
                    "ports": {
                        "type": "object",
                        "description": "The port definitions of the service",
                        "additionalProperties": {
                            "$ref": "#\/components\/schemas\/Port"
                        }
                    },
                    "restartPolicy": {
                        "description": "The restart policy of the service",
                        "$ref": "#\/components\/schemas\/RestartPolicy"
                    },
                    "resources": {
                        "description": "The resource allocations of the service",
                        "$ref": "#\/components\/schemas\/ResourceAllocations"
                    },
                    "status": {
                        "description": "The status of the task",
                        "$ref": "#\/components\/schemas\/DockerTaskStatus"
                    },
                    "serverConfig": {
                        "description": "The server configuration",
                        "$ref": "#\/components\/schemas\/ServerConfig"
                    },
                    "backup": {
                        "description": "The last backup of the service",
                        "$ref": "#\/components\/schemas\/Backup"
                    }
                },
                "required": [
                    "id",
                    "appLocationSettingId",
                    "instance",
                    "name",
                    "addr",
                    "createdAt",
                    "updatedAt",
                    "location",
                    "env",
                    "ports",
                    "restartPolicy",
                    "resources",
                    "status",
                    "serverConfig"
                ],
                "title": "Server"
            },
            "ServerCollection": {
                "type": "array",
                "items": {
                    "$ref": "#\/components\/schemas\/Server"
                },
                "title": "ServerCollection"
            },
            "ServerConfig": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The id of the server configuration"
                    },
                    "binaryId": {
                        "type": "integer",
                        "description": "The binary id of the server configuration"
                    },
                    "appId": {
                        "type": "integer",
                        "description": "The app id of the server configuration"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the server config"
                    },
                    "command": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The command to run in the container (overrides ENTRYPOINT of the Dockerfile)"
                    },
                    "args": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The arguments to pass to the command (overrides CMD of the Dockerfile)"
                    },
                    "notes": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The notes of the server config - to keep track of things and to inform colleagues"
                    },
                    "restartPolicy": {
                        "description": "The policy used to restart this server",
                        "$ref": "#\/components\/schemas\/RestartPolicy"
                    },
                    "resources": {
                        "description": "The resources to be used in this config",
                        "$ref": "#\/components\/schemas\/ResourceAllocations"
                    },
                    "env": {
                        "type": "array",
                        "description": "The environment variable definitions to be used in this config",
                        "items": {
                            "$ref": "#\/components\/schemas\/EnvironmentVariableDefinition"
                        }
                    },
                    "mounts": {
                        "type": "array",
                        "description": "The mounts to use",
                        "items": {
                            "$ref": "#\/components\/schemas\/Mount"
                        }
                    },
                    "ports": {
                        "type": "array",
                        "description": "The ports to expose",
                        "items": {
                            "$ref": "#\/components\/schemas\/PortDefinition"
                        }
                    },
                    "configFiles": {
                        "type": "array",
                        "description": "The config files to use",
                        "items": {
                            "$ref": "#\/components\/schemas\/ConfigFile"
                        }
                    },
                    "secretFiles": {
                        "type": "array",
                        "description": "The secret files to use",
                        "items": {
                            "$ref": "#\/components\/schemas\/SecretFile"
                        }
                    },
                    "binary": {
                        "description": "The image that is used in this server config",
                        "$ref": "#\/components\/schemas\/Binary"
                    }
                },
                "required": [
                    "id",
                    "binaryId",
                    "appId",
                    "name",
                    "command",
                    "args",
                    "notes",
                    "restartPolicy",
                    "resources",
                    "env",
                    "mounts",
                    "ports",
                    "configFiles",
                    "secretFiles"
                ],
                "title": "ServerConfig"
            },
            "ServerConfigCollection": {
                "type": "array",
                "items": {
                    "$ref": "#\/components\/schemas\/ServerConfig"
                },
                "title": "ServerConfigCollection"
            },
            "ServiceLogs": {
                "type": "object",
                "properties": {
                    "logs": {
                        "type": "string",
                        "description": "The logs as a string with newlines"
                    }
                },
                "required": [
                    "logs"
                ],
                "title": "ServiceLogs"
            },
            "Steam": {
                "type": "object",
                "properties": {
                    "steamAppId": {
                        "type": "integer",
                        "description": "The Steam App ID"
                    },
                    "branch": {
                        "type": "string",
                        "description": "The branch to use"
                    },
                    "password": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "The password to use"
                    }
                },
                "required": [
                    "steamAppId",
                    "branch",
                    "password"
                ],
                "title": "Steam"
            },
            "ZipFile": {
                "type": "object",
                "properties": {
                    "zipFileUrl": {
                        "type": "string",
                        "description": "The URL to the ZIP file"
                    },
                    "commandLine": {
                        "type": "string",
                        "description": "The command line to use"
                    }
                },
                "required": [
                    "zipFileUrl",
                    "commandLine"
                ],
                "title": "ZipFile"
            }
        },
        "responses": {
            "ModelNotFoundException": {
                "description": "Not found",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "description": "Error overview."
                                }
                            },
                            "required": [
                                "message"
                            ]
                        }
                    }
                }
            },
            "AuthenticationException": {
                "description": "Unauthenticated",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "description": "Error overview."
                                }
                            },
                            "required": [
                                "message"
                            ]
                        }
                    }
                }
            },
            "ValidationException": {
                "description": "Validation error",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "description": "Errors overview."
                                },
                                "errors": {
                                    "type": "object",
                                    "description": "A detailed description of each field that failed validation.",
                                    "additionalProperties": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "required": [
                                "message",
                                "errors"
                            ]
                        }
                    }
                }
            },
            "AuthorizationException": {
                "description": "Authorization error",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "description": "Error overview."
                                }
                            },
                            "required": [
                                "message"
                            ]
                        }
                    }
                }
            },
            "NotFoundHttpException": {
                "description": "Not found",
                "content": {
                    "application\/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "description": "Error overview."
                                }
                            },
                            "required": [
                                "message"
                            ]
                        }
                    }
                }
            }
        }
    }
}