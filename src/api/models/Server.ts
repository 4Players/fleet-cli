/**
 * ODIN Fleet API
 * API to access Odin Fleet, empowering developers to deploy gameservers all around the world in just a few lines of code.
 *
 * OpenAPI spec version: 0.8.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Backup } from '../models/Backup.ts';
import { DockerTaskStatus } from '../models/DockerTaskStatus.ts';
import { EnvironmentVariable } from '../models/EnvironmentVariable.ts';
import { Location } from '../models/Location.ts';
import { Port } from '../models/Port.ts';
import { ResourceAllocations } from '../models/ResourceAllocations.ts';
import { RestartPolicy } from '../models/RestartPolicy.ts';
import { ServerConfig } from '../models/ServerConfig.ts';
import { HttpFile } from '../http/http.ts';

export class Server {
    /**
    * The ID of the service
    */
    'id': number;
    /**
    * The ID of the location setting
    */
    'appLocationSettingId': number;
    /**
    * The ID of the instance
    */
    'instance': number;
    'name': string;
    /**
    * The IP address of the node
    */
    'addr': string | null;
    /**
    * When the service was created
    */
    'createdAt': Date;
    /**
    * When the service was last updated
    */
    'updatedAt': Date;
    /**
    * The location of the node
    */
    'location': Location;
    /**
    * The environment variables of the service
    */
    'env': { [key: string]: EnvironmentVariable; };
    /**
    * The port definitions of the service
    */
    'ports': { [key: string]: Port; };
    /**
    * The restart policy of the service
    */
    'restartPolicy': RestartPolicy;
    /**
    * The resource allocations of the service
    */
    'resources': ResourceAllocations;
    /**
    * The status of the task
    */
    'status': DockerTaskStatus;
    /**
    * The server configuration
    */
    'serverConfig': ServerConfig;
    /**
    * The last backup of the service
    */
    'backup'?: Backup;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number",
            "format": ""
        },
        {
            "name": "appLocationSettingId",
            "baseName": "appLocationSettingId",
            "type": "number",
            "format": ""
        },
        {
            "name": "instance",
            "baseName": "instance",
            "type": "number",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "addr",
            "baseName": "addr",
            "type": "string",
            "format": "ipv4"
        },
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "updatedAt",
            "baseName": "updatedAt",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "location",
            "baseName": "location",
            "type": "Location",
            "format": ""
        },
        {
            "name": "env",
            "baseName": "env",
            "type": "{ [key: string]: EnvironmentVariable; }",
            "format": ""
        },
        {
            "name": "ports",
            "baseName": "ports",
            "type": "{ [key: string]: Port; }",
            "format": ""
        },
        {
            "name": "restartPolicy",
            "baseName": "restartPolicy",
            "type": "RestartPolicy",
            "format": ""
        },
        {
            "name": "resources",
            "baseName": "resources",
            "type": "ResourceAllocations",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "DockerTaskStatus",
            "format": ""
        },
        {
            "name": "serverConfig",
            "baseName": "serverConfig",
            "type": "ServerConfig",
            "format": ""
        },
        {
            "name": "backup",
            "baseName": "backup",
            "type": "Backup",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return Server.attributeTypeMap;
    }

    public constructor() {
    }
}

